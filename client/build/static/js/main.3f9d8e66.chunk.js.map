{"version":3,"sources":["css/images/logo_eduLEAN.png","css/images/logo_ekopak.png","components/common/menuMainItem.js","components/common/menuItem.js","components/common/menuItems.js","services/utils.js","components/input forms/confirmAlertInput.js","constants/server_URL_paths.js","services/authService.js","services/httpService.js","services/userService.js","constants/client_URL_paths.js","services/localisationService.js","components/input forms/formInputTask.jsx","services/taskService.js","redux/actions/actionsTasks.js","redux/constants/actionTypes.js","components/button components/buttonAddTask.js","redux/actions/actionsServiceMode.js","redux/actions/actionsLocalisations.js","components/show tasks/tasksHeaderBar.jsx","components/button components/buttonToggleManagerMode.js","components/button components/buttonToggleChooseManyTasks.js","components/input forms/confirmAlert.js","components/button components/buttonDeleteManyTasks.js","components/button components/buttonCloseManyTasks.js","components/show tasks/sortingButtons.jsx","components/util compnents/logoutButtonBox.jsx","components/button components/buttonTakeTask.js","components/button components/buttonCloseTask.js","components/button components/buttonDeleteTask.js","components/input forms/formPartialDelivery.jsx","components/button components/buttonPartialDelivery.js","components/common/customCheckBox.js","components/show tasks/task.jsx","components/show tasks/taskBoxHeader.jsx","components/show tasks/taskBox.jsx","components/common/loader.js","components/show tasks/showTasks.jsx","services/taskToExcelService.js","components/settings/settingsHeaderBar.jsx","components/common/linkWithButton.js","components/input forms/confirmAlertSettings.jsx","components/input forms/inputCustomSelect.js","components/settings/userRecord.jsx","components/settings/users.jsx","components/settings/localisations.jsx","components/settings/userPage.jsx","components/util compnents/protectedRoute.js","components/settings/settingsSwitch.jsx","components/util compnents/advertisement.jsx","components/home page/home.jsx","components/util compnents/selectLocalisation.jsx","components/login page/loginPage.jsx","components/util compnents/noPermssions.jsx","services/checkUserActivityService.js","App.js","serviceWorker.js","redux/reducers/reducerTasks.js","redux/reducers/reducerLocalisations.js","redux/reducers/reducerServiceMode.js","redux/reducers/root.js","redux/store.js","index.js"],"names":["module","exports","MenuMainItem","label","path","icon","Link","to","className","MenuItem","item","action","onClick","category","iconType","renderIcon","name","MenuItems","items","map","key","runFunctionAfterPressEnter","target","runFunction","charCode","getCustomTaskCss","customClassName","getDateFromTaskCreatedIn","date","slice","getTimeFromTaskCreatedIn","ConfirmAlertInput","state","handleInputOnChange","input","currentTarget","value","setState","validate","error","Joi","schema","details","message","p_label","type","placeholder","onClose","autoFocus","onchangeHandler","this","autoComplete","onChange","onKeyPress","utils","doSubmit","options","defaultValue","data-style","option","btnStyle","Component","auth","users","localisations","tasks","getExcelFileWithTasks","apiEndPoint","server_path","tokenKey","login","password","a","async","httpService","post","jwt","data","shortIdentification","idCode","pin","setJwt","localStorage","setItem","getJwt","getItem","removeJwt","removeItem","axios","defaults","baseURL","process","setHeader_xAuthToken","authService","errorCount","headers","common","interceptors","response","use","status","toast","setTimeout","Promise","reject","get","put","patch","delete","jobNames","getUserFromJWT","jwtDecode","undefined","isCurrentUserGreaterThanORequalTo","jobName","user","getUserJobValue","job","endpoint","getJobNames","Object","keys","getUsers","isAdmin","filter","u","sort","b","addUser","updateUser","_id","deleteUser","logoutUser","isLogged","resetUserPassword","newPassword","resetUserPIN","newPIN","getUserJobName","isCurrentUserLessThan","isCurrentUserLessThanORequalTo","isCurrentUserGreaterThan","isCurrentUserEqualTo","isThisJobManaging","main","paramId","home","loginPage","noPermissions","selectLocalisation","settings","localisationNames","getCurrentUserLocalisations","userLocalisations","JSON","parse","getLocalisationNames","getLocalisations","setUserLocalisations","forEach","localisation","client_URL_paths","stringified_localisations","stringify","getUserLocalisationsFromDB","userService","addLocalisation","updateLocalisation","deleteLocalisation","getSelectedLocalisation","endPoint","validLocalisations","vl","getCurrentLocalisation","pathname","localisationFromPathname","sortLocalisationsOrder","order_number","FormInputTask","content","string","max","required","errorMessages","createdBy","location","qty","number","min","isCommonUser","submit","resetOnlyCommonUserData","confirmAlert","customUI","props","form","title","p_label_2","defaultContent","defaultQty","localisationService","unshift","renderInputCustomSelect","renderInputBoxGroup","renderButton","button","resetTaskData","toUpperCase","userFromCommonMode","changedLocalisationByURL","getTasks","document","visibilityState","Date","getTime","addTask","task","addedTask","updateTask","taskToUpdate","updatedTask","deleteTask","deletedTask","getSortedData","reduxState","currentLocalisation","reducerTasks","reducerLocalisations","currentSortingStatus","isDone","getFilteredTasks_bySortingStatus","getFilteredColumns","columns","reducerServiceMode","isServiceMode_jobName","serviceMode_jobName","serviceMode","managerMode","isManagingSet","filteredColumns","push","special","column_takedBy","column_take","column_btnClose","column_createdInFormatedData","column_btnDelete","chooseManyTasksMode","selectedTasksIDs_fromManagerMode","connect","dispatch","updateTasks","actionsTasks","form_confirmAlertInput_addTask","btn_css","new_task","taskService","registered_newTask","success","transition","cssTransition","enter","exit","duration","handleAddTask","renderCustomForm","bool","job_name","toggleServiceMode","actionsServiceMode","changeServiceMode_jobName","changeCurrentLocalisation","actionsLocalisations","useState","setCurrentLocalisation","setServiceModen","handleChangeCurrentLocalisation","handleChangeServiceMode","headerButtons","allJobNames","useEffect","isSupervisor","toggle","renderServiceModeMainButton","client_paths","renderShowDataMenu","toggleManagerMode","boolean","toggleChooseManyTasksMode","updateChoosenTasksFromManagerMode","checkAndtoggleChooseManyTasksMode","ConfirmAlert","itemRepresentation","buttons","btn_label","isDisabled","disableButton","disabled","form_deleteManyTask","updated_tasks_list","taskId_toDelete","index","findIndex","splice","taskObjectToDelete","deleteAllChoosenTasks","isButtonDisabled","length","prev_tasks","taskId_toClose","task_toClose","closedBy","closed_task","changeCurrentSortingStatuts","newStatus","setCurrentSortingStatus","sortingButtons","handleChangeSortingStatus","buttonPath","isManager","showButton_managerMode","LogoutButtonBox","form_confirmAlert","logout","clear","history","indexOf","showOrHideElement","render_pLabel","style","textTransform","withRouter","currentUserTakedThisTask","takedBy","btnStyle_taskTaked","isDOne","fullText","shortText","taked_task","updated_tasks","t","handleTakeTask","getCustomForm","form_closeTask","handleCloseTask","form_deleteTask","taskToDelete","deleted_task","handleDeleteTask","FormPartialDelivery","partialQty","errorMessage","inputValue","originalPartialQty","handleInputOnChange_partialDelivery","confirmGreaterDeliveryThanOrder","parseInt","form_partialDelivery","partialTime","handlePartialDelivery","CustomCheckBox","isChecked","faClass","isSelected","includes","handleTaskClickInManagerMode","selected_tasks","selectedTask","array","taskId","updated_choosenTasks_fromManagerMode","removeTaskFrom_selectedTasksIDs_fromManagerMode","renderCloseButton","isOperator","isMagazynierAndHisTask","renderContent","column","Fragment","createdInFormatedData","renderTaskContent","alreadyDelivered","renderQty","time","renderTakedBy","isUrgent","taskCustomCSS","onDoubleClick","handleSetTaskUrgency","invisibleText","isVisible","waringBoxStyle","find","filteredClumns","height","width","itemData","itemCount","itemSize","Loader","ShowTasks","interval_cdm_refreshingData","onFocus","mounted","interval_onFocus_refreshingData","set_interval_refreshData","onBlur","remove_intervals_refreshData","onHideApp","interval_onHideApp_refreshingData","window","setInterval","getTasksFromDB_updateReducerState","redirectIfNeeded","setActivityDetection","data_from_DB","removeActivityDetection","addEventListener","removeEventListener","clearInterval","isNormalWorker","match","params","id","getTasksInExcelFile","getFileName","timeOnServer_GMT0","timeOffset_Poland","toISOString","fileName","responseType","blob","Blob","filesaver","saveAs","getTaskInExcelFile","taskToExcellFileService","SettingsHeaderBar","validLocations","LinkWithButton","css","ConfirmAlertSettings","placeholder_1","placeholder_2","input_1_type","name_1","name_2","InputCustomSelect","currentValue","UserRecord","renderCellContent","PureComponent","Users","form_deleteUser","handleDeleteUser","form_resetPassword","handleResetPassword","form_addteUser","inputData","handleAddUser","userToDelete","newUserData","validateNewUser","newUser","info","updateUserPermissions","area","userWithLocalyChangedPermissions","chamgeUserPermisions","updatedUserInDataBase","renderUserStatus","renderCheckBox","permissions","isOptionButtonDissabled","userPermissions","selectOptions","renderAddUserButton","renderHeader","renderUsers","Localisations","handleDeleteLocalisation","form_addLocalisation","handleAddLocalisation","localisationToDelete","l","validateNewLocalisation","newLocalisation","sortedLocalisations","renderConfirmAlert","mainDivCSS","contentCSS","itemCSS","renderAddLocalisationButton","renderLocalisations","UserPage","pwd","form_resetPIN","handleResetPIN","newPin","schemaPassword","schemaPIN","validateNewCredencials","token","goBack","userName","shortIdentifier","renderReturnButton","renderSettingsNavigationButtons","ProtectedRoute","requireUserLevel","redirectPath","component","render","rest","Redirect","accessDenied","Route","SettingsSwitch","path_settings","submenuOptions","Switch","from","Advertisement","src","logoEduLEAN","alt","Home","client_path","SelectLocalisation","renderSelectLocalisationButtons","LoginPage","handleLogin","validateUser","runLoader","redirectUserToNextPath","isWaitingForSerwerResponse","mode","utilsService","renderLoginBox","NoPermissions","timeLimit","onReturn","checkUserActivity","setLastActivity","lastActivityTime","App","ex","Boolean","hostname","rootReducer","combineReducers","store","createStore","ReactDOM","BrowserRouter","basename","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f9d8e66.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_eduLEAN.9308f86e.png\";","module.exports = __webpack_public_path__ + \"static/media/logo_ekopak.a0b89b36.png\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst MenuMainItem = ({label, path, icon}) => {\r\n    return ( \r\n        <Link to={path}>\r\n            <li className=\"app__header-menu_item app__header-menu_item-main\">\r\n                <i className={\"fa fas \" + icon}></i>\r\n                <p>{label}</p>\r\n            </li>\r\n        </Link>\r\n     );\r\n}\r\n \r\nexport default MenuMainItem;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst MenuItem = ({ item, action }) => {\r\n    function renderIcon() {\r\n        let iconType;\r\n        if (item.category === \"Magazyn\") {\r\n            iconType = \"cubes\";\r\n        }\r\n        else if (item.category === \"Maszyna\") {\r\n            iconType = \"cubes invisible\";\r\n        }\r\n        else if (item.category === \"Utrzymanie ruchu\") {\r\n            iconType = \"wrench\";\r\n        }\r\n        return (\r\n            <i className={\"fa fas fa-\" + iconType}></i>\r\n        )\r\n    }\r\n    return (\r\n        <Link to={item.path} >\r\n            <li className=\"app__header-menu_item\" onClick={action} >\r\n                {item.category && renderIcon()}\r\n                {item.name || item.label}\r\n            </li>\r\n        </Link>\r\n    );\r\n}\r\n\r\nexport default MenuItem;","import React from 'react';\r\nimport MenuItem from './menuItem';\r\n\r\nconst MenuItems = ({ items, action }) => {\r\n    return (\r\n        items.map(item =>\r\n            <MenuItem key={item.name || item.label}\r\n                item={item}\r\n                action={() => action(item)}\r\n            />\r\n        )\r\n    );\r\n}\r\n\r\nexport default MenuItems;","\r\nexport function runFunctionAfterPressEnter(target, runFunction) {\r\n    if (target.charCode === 13)\r\n        runFunction();\r\n}\r\n\r\nexport function getDateFromTaskCreatedIn(date) {\r\n    return date.slice(0, 10);\r\n}\r\n\r\nexport function getTimeFromTaskCreatedIn(date) {\r\n    return date.slice(11, 19);\r\n}\r\n\r\n\r\nfunction getCustomTaskCss(path, customClassName) {\r\n    if (path === \"#\") return \"task-box__\" + customClassName + \"_index\";\r\n    else if (path === \"content\") return \"task-box__\" + customClassName + \"_content\";\r\n    else if (path === \"status\") return \"task-box__\" + customClassName + \"_status\";\r\n    else if (path === \"qty\") return \"task-box__\" + customClassName + \"_qty\";\r\n    else if (path === \"partialQty\") return \"task-box__\" + customClassName + \"_partialQty\";\r\n    else if (path === \"location\") return \"task-box__\" + customClassName + \"_location\";\r\n    else if (path === \"time\") return \"task-box__\" + customClassName + \"_time\";\r\n    else if (path === \"take\") return \"task-box__\" + customClassName + \"_take\";\r\n    else if (path === \"btnClose\") return \"task-box__\" + customClassName + \"_btnClose\";\r\n    else if (path === \"takedBy\") return \"task-box__\" + customClassName + \"_takedBy\";\r\n    else if (path === \"createdInFormatedData\") return \"task-box__\" + customClassName + \"_createdInFormatedData\";\r\n    else if (path === \"btnDelete\") return \"task-box__\" + customClassName + \"_btnDelete\";\r\n    return;\r\n}\r\n\r\nexport default {\r\n    runFunctionAfterPressEnter,\r\n    getCustomTaskCss,\r\n    getDateFromTaskCreatedIn,\r\n    getTimeFromTaskCreatedIn,\r\n}","import React, { Component } from 'react';\r\nimport Joi from 'joi-browser';\r\nimport utils from '../../services/utils';\r\n\r\nclass ConfirmAlertInput extends Component {\r\n  state = {}\r\n\r\n  handleInputOnChange = ({ currentTarget: input }) => {\r\n    const item = { ...this.state.item };\r\n    item[input.name] = input.value;\r\n    this.setState({ item })\r\n  };\r\n\r\n  renderInputBoxGroup(p_label, name, type, placeholder, onClose, autoFocus, onchangeHandler = this.handleInputOnChange) {\r\n    return <div className=\"confirmAlertInput__input-box_group\">\r\n      <p>{p_label}</p>\r\n      <input name={name}\r\n        type={type}\r\n        placeholder={placeholder}\r\n        autoComplete=\"off\"\r\n        autoFocus={autoFocus}\r\n        onChange={onchangeHandler}\r\n        onKeyPress={(target) => utils.runFunctionAfterPressEnter(target, () => this.doSubmit(onClose))} //\r\n      ></input>\r\n    </div>\r\n  }\r\n\r\n\r\n  renderInputCustomSelect(p_label, options, name, defaultValue = \"\", onchangeHandler = this.handleInputOnChange) {\r\n    return <div className=\"confirmAlertInput__input-box_group\">\r\n      <p>{p_label}</p>\r\n      <select className=\"custom-select\" data-style=\"btn-primary\"\r\n        name={name}\r\n        onChange={onchangeHandler}\r\n        defaultValue={defaultValue}\r\n      >\r\n        {options.map(option =>\r\n          <option key={option} value={option}>{option}</option>\r\n        )}\r\n      </select>\r\n    </div>\r\n  }\r\n\r\n  renderButton(label, action, btnStyle) {\r\n    return <button className={btnStyle} onClick={action}>{label}</button>\r\n  }\r\n  validate = (item) => {\r\n    const { error } = Joi.validate(item, this.schema);\r\n    return error ? error.details[0].message : null;\r\n  };\r\n}\r\n\r\nexport default ConfirmAlertInput;","export default {\r\n    auth: \"/auth\",\r\n    users: \"/users\",\r\n    localisations: \"/localisations\",\r\n    tasks: \"/tasks\",\r\n    getExcelFileWithTasks: \"/getExcelFile\",\r\n\r\n}","import httpService from \"./httpService\";\r\nimport server_path from '../constants/server_URL_paths';\r\n\r\nconst apiEndPoint = server_path.auth;\r\nconst tokenKey = \"FilmagToken\";\r\n\r\n\r\nexport async function login(name, password) {\r\n    const { data: jwt } = await httpService.post(apiEndPoint, { name, password });\r\n    return jwt;\r\n}\r\n\r\nexport async function shortIdentification(idCode, pin) {\r\n    const { data } = await httpService.post(apiEndPoint + \"/shortIdentification/\", { idCode, pin });\r\n    return data;\r\n}\r\nexport function setJwt(jwt) {\r\n    return localStorage.setItem(tokenKey, jwt);\r\n}\r\n\r\nexport function getJwt() {\r\n    return localStorage.getItem(tokenKey);\r\n}\r\n\r\nexport function removeJwt() {\r\n    localStorage.removeItem(tokenKey);\r\n}\r\n\r\nexport default {\r\n    login,\r\n    shortIdentification,\r\n    setJwt,\r\n    getJwt,\r\n    removeJwt\r\n}","import axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport authService from './authService';\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\nsetHeader_xAuthToken(authService.getJwt());\r\n\r\nlet errorCount = 0;\r\naxios.interceptors.response.use(null, error => {\r\n  const expectedError = error.response && error.response.status >= 400 && error.response.status < 500;\r\n\r\n  if (!expectedError && errorCount === 0) {\r\n    errorCount += 1;\r\n    toast.error(\"Brak połączenia z serwerem.\")\r\n    setTimeout(function () { errorCount = 0 }, 2000)\r\n  }\r\n  return Promise.reject(error)\r\n})\r\n\r\n\r\nexport function setHeader_xAuthToken(jwt) {\r\n  axios.defaults.headers.common['x-auth-token'] = jwt;\r\n\r\n}\r\nexport default {\r\n  get: axios.get,\r\n  post: axios.post,\r\n  put: axios.put,\r\n  patch: axios.patch,\r\n  delete: axios.delete,\r\n  setHeader_xAuthToken\r\n}","import jwtDecode from 'jwt-decode';\r\nimport httpService from \"./httpService\";\r\nimport auth from './authService';\r\nimport server_path from '../constants/server_URL_paths';\r\n\r\nconst apiEndPoint = server_path.users;\r\n\r\nconst jobNames = {\r\n    \"SuperAdmin\": 1000,\r\n    \"Admin\": 100,\r\n    \"Prezes\": 14,\r\n    \"Dyrektor\": 13,\r\n    \"Kierownik\": 12,\r\n    \"Mistrz\": 11,\r\n    \"Koordynator\": 10,\r\n    \"Współdzielone\": 4,\r\n    \"Prac. utrz. ruchu\": 3,\r\n    \"Magazynier\": 2,\r\n    \"Operator\": 1\r\n};\r\n\r\nexport function getJobNames() {\r\n    return Object.keys(jobNames);\r\n}\r\n\r\nexport async function getUsers() {\r\n    const isAdmin = isCurrentUserGreaterThanORequalTo(\"Admin\");\r\n    let { data } = await httpService.get(apiEndPoint);\r\n    data = isAdmin ? data : data.filter(u => u.job !== \"Admin\" && u.job !== \"SuperAdmin\") // nie pokazuj użytkowników, którzy mają większe uprawnienia\r\n    data = data.sort((a, b) => getUserJobValue(b.job) - getUserJobValue(a.job)) // sortuj tak, aby wyświetlać zgodnie z hierarchią\r\n    return data;\r\n}\r\n\r\nexport async function addUser(user) {\r\n    const { data } = await httpService.post(apiEndPoint, user);\r\n    return data;\r\n}\r\n\r\nexport async function updateUser(user) {\r\n    const { data } = await httpService.put(apiEndPoint + \"/\" + user._id, user);\r\n    return data;\r\n}\r\n\r\nexport async function deleteUser(user) {\r\n    const { data } = await httpService.delete(apiEndPoint + \"/\" + user._id);\r\n    return data;\r\n}\r\n\r\nexport async function logoutUser() {\r\n    const user = getUserFromJWT();\r\n    await httpService.patch(apiEndPoint + \"/\" + user._id, { isLogged: false });\r\n}\r\n\r\nexport async function resetUserPassword(user) {\r\n    const { data } = await httpService.patch(\"/resetPassword/\" + user._id, { password: user.password, newPassword: user.newPassword });\r\n    return data;\r\n}\r\n\r\nexport async function resetUserPIN(user) {\r\n    const { data } = await httpService.patch(\"/resetPassword/\" + user._id, { password: user.password, newPIN: user.newPIN });\r\n    return data;\r\n}\r\n\r\n// funkcje przetwarzające dane\r\nexport function getUserFromJWT() {\r\n    const jwt = auth.getJwt()\r\n    return jwt ? jwtDecode(jwt) : undefined;\r\n}\r\n\r\nexport function isCurrentUserGreaterThanORequalTo(jobName) { // zmienic na required\r\n    const user = getUserFromJWT();\r\n    if (!user) return false;\r\n    const currentUserJob = user.job;\r\n    return getUserJobValue(currentUserJob) >= jobNames[jobName];\r\n}\r\n\r\nexport function isCurrentUserLessThan(jobName) {\r\n    const currentUserJob = getUserFromJWT().job;\r\n    return getUserJobValue(currentUserJob) < jobNames[jobName];\r\n}\r\n\r\nexport function isCurrentUserLessThanORequalTo(jobName) {\r\n    const currentUserJob = getUserFromJWT().job;\r\n    return getUserJobValue(currentUserJob) <= jobNames[jobName];\r\n}\r\n\r\nexport function isCurrentUserGreaterThan(jobName) {\r\n    const currentUserJob = getUserFromJWT().job;\r\n    return getUserJobValue(currentUserJob) > jobNames[jobName];\r\n}\r\n\r\nexport function isCurrentUserEqualTo(jobName) {\r\n    const currentUserJob = getUserFromJWT().job;\r\n    return getUserJobValue(currentUserJob) === jobNames[jobName];\r\n}\r\n\r\nexport function isThisJobManaging(jobName) {\r\n    return getUserJobValue(jobName) >= jobNames['Koordynator'];\r\n}\r\n\r\nexport function getUserJobValue(jobName) {\r\n    return jobNames[jobName]\r\n}\r\n\r\nexport function getUserJobName(user) {\r\n    for (let key in jobNames) {\r\n        if (jobNames[key] === user.job) return key;\r\n    }\r\n}\r\n\r\nexport default {\r\n    endpoint: apiEndPoint,\r\n    getJobNames,\r\n    getUsers,\r\n    addUser,\r\n    updateUser,\r\n    deleteUser,\r\n    logoutUser,\r\n    resetUserPassword,\r\n    resetUserPIN,\r\n    getUserFromJWT,\r\n    getUserJobName,\r\n    getUserJobValue,\r\n    isCurrentUserLessThan,\r\n    isCurrentUserLessThanORequalTo,\r\n    isCurrentUserGreaterThan,\r\n    isCurrentUserGreaterThanORequalTo,\r\n    isCurrentUserEqualTo,\r\n    isThisJobManaging\r\n}","export default {\r\n    tasks: {\r\n        main: \"/show-tasks\",\r\n        paramId: \"/show-tasks/:id\"\r\n    },\r\n    home: \"/\",\r\n    loginPage: \"/login\",\r\n    noPermissions: \"/no-permissions\",\r\n    selectLocalisation: \"/select-localisation\",\r\n    getExcelFileWithTasks: \"/getExcelFile\",\r\n    settings: {\r\n        main: \"/settings\",\r\n        user: \"/settings/user\",\r\n        users: \"/settings/users\",\r\n        localisations: \"/settings/localisations\"\r\n    }\r\n}","import httpService from \"./httpService\";\r\nimport userService from '../services/userService';\r\nimport { toast } from 'react-toastify';\r\nimport client_URL_paths from '../constants/client_URL_paths';\r\nimport server_path from '../constants/server_URL_paths';\r\n\r\nconst apiEndPoint = server_path.localisations;\r\nconst tokenKey = \"userLocalisations\";\r\n\r\nconst localisationNames = {\r\n    \"Magazyn\": 3,\r\n    \"Utrzymanie ruchu\": 2,\r\n    \"Maszyna\": 1\r\n};\r\nexport function getLocalisationNames() {\r\n    return Object.keys(localisationNames);\r\n}\r\nexport async function getLocalisations() {\r\n    try {\r\n        const { data } = await httpService.get(apiEndPoint);\r\n\r\n        return data;\r\n    } catch (ex) {\r\n        toast.error(\"Nie można uzyskać danych o lokalizacjach.\")\r\n    }\r\n}\r\nexport async function getUserLocalisationsFromDB(user) {\r\n    const { data: userLocalisations } = await httpService.get(userService.endpoint + \"/\" + user._id + \"/localisations\");\r\n    return userLocalisations;\r\n}\r\n\r\nexport function setUserLocalisations(userLocalisations) {\r\n\r\n    userLocalisations.forEach(localisation => localisation.path = `${client_URL_paths.tasks.main}/${localisation.name}`);\r\n    const stringified_localisations = JSON.stringify(userLocalisations);\r\n\r\n    localStorage.setItem(tokenKey, stringified_localisations);\r\n}\r\nexport function getCurrentUserLocalisations() {\r\n    const userLocalisations = localStorage.getItem(tokenKey);\r\n    return userLocalisations ? JSON.parse(userLocalisations) : [];\r\n}\r\n\r\nexport async function addLocalisation(localisation) {\r\n    const { data } = await httpService.post(apiEndPoint, localisation);\r\n    return data;\r\n}\r\nexport async function updateLocalisation(localisation) {\r\n    const { data } = await httpService.put(apiEndPoint + \"/\" + localisation._id, localisation);\r\n    return data;\r\n}\r\nexport async function deleteLocalisation(localisation) {\r\n    const { data } = await httpService.delete(apiEndPoint + \"/\" + localisation._id);\r\n    return data;\r\n}\r\n\r\nexport async function getSelectedLocalisation(endPoint) {\r\n    const validLocalisations = await getCurrentUserLocalisations();\r\n    return endPoint ? validLocalisations.filter(vl => vl.name === endPoint)[0] : null;\r\n}\r\n\r\n\r\nexport async function getCurrentLocalisation(pathname) {\r\n    const validLocalisations = await getCurrentUserLocalisations();\r\n    const localisationFromPathname = validLocalisations.filter(vl => vl.path === pathname);\r\n    return localisationFromPathname[0] ? localisationFromPathname[0] : validLocalisations[0];\r\n}\r\n\r\nexport function sortLocalisationsOrder(localisations) {\r\n    const sortedLocalisations = localisations.sort((a, b) => a.order_number - b.order_number);\r\n    return sortedLocalisations;\r\n}\r\n\r\nexport default {\r\n    getLocalisationNames,\r\n    getLocalisations,\r\n    setUserLocalisations,\r\n    getCurrentUserLocalisations,\r\n    getUserLocalisationsFromDB,\r\n    addLocalisation,\r\n    updateLocalisation,\r\n    deleteLocalisation,\r\n    getSelectedLocalisation,\r\n    getCurrentLocalisation,\r\n    sortLocalisationsOrder\r\n}","import React from 'react';\r\nimport Joi from 'joi-browser';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport { toast } from 'react-toastify';\r\nimport ConfirmAlertInput from './confirmAlertInput';\r\nimport userService from '../../services/userService';\r\nimport localisationService from '../../services/localisationService';\r\nimport authService from '../../services/authService';\r\n\r\nclass FormInputTask extends ConfirmAlertInput {\r\n\r\n  schema = {\r\n    content: Joi.string().max(40).required().error(() => { return { message: this.errorMessages[\"content\"] }; }),\r\n    type: Joi.string().required(),\r\n    createdBy: Joi.string(),\r\n    location: Joi.string().required().error(() => { return { message: this.errorMessages[\"location\"] }; }),\r\n    qty: Joi.number().min(1).max(99999).required().error(() => { return { message: this.errorMessages[\"qty\"] }; })\r\n\r\n  };\r\n  errorMessages = {\r\n    content: 'Treść zdarzenia nie może być pusta i może mieć maks. 40 znaków',\r\n    qty: 'Pole \"Ilość\" nie może być puste a wartość być liczbą z zakresu 1 - 9999',\r\n    location: \"Proszę podać lokalizację\",\r\n    idCode: \"Nieprawidłowy kod ID\",\r\n    pin: \"Nieprawidłowy PIN\"\r\n  }\r\n\r\n  isCommonUser = userService.getUserFromJWT().isCommonUser;\r\n\r\n  componentDidMount() {\r\n    const item = {\r\n      content: this.props.form.content,\r\n      type: this.props.button.type,\r\n      qty: 1,\r\n      location: this.props.localisation.name,\r\n      createdBy: userService.getUserFromJWT().name\r\n\r\n    }\r\n\r\n    this.setState({ item })\r\n    if (this.isCommonUser) {\r\n      this.schema.idCode = Joi.string().min(3).max(3).required().error(() => { return { message: this.errorMessages[\"idCode\"] }; });\r\n      this.schema.pin = Joi.string().min(4).max(4).required().error(() => { return { message: this.errorMessages[\"pin\"] }; });\r\n    }\r\n\r\n  }\r\n  static getDerivedStateFromProps(props, state) {\r\n    const changedLocalisationByURL = state.item && props.localisation.name !== state.item.location.name;\r\n    const isCommonUser = userService.getUserFromJWT().isCommonUser;\r\n\r\n    if (changedLocalisationByURL && !isCommonUser) {\r\n      return {\r\n        item: { ...state.item, location: props.localisation.name }\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  addQtyToSchema() {\r\n    return this.schema.qty = Joi.number().min(1).max(99999).required().error(() => { return { message: this.errorMessages[\"qty\"] }; });\r\n  }\r\n\r\n  resetOnlyCommonUserData() {\r\n    const item = { ...this.state.item };\r\n    delete item.idCode;\r\n    delete item.pin;\r\n\r\n    this.setState({ item })\r\n  }\r\n\r\n  resetTaskData() {\r\n    const item = { ...this.state.item };\r\n    item.content = this.props.form.content;\r\n    item.qty = 1;\r\n\r\n    if (this.isCommonUser)\r\n      item.location = \"\";\r\n\r\n    this.setState({ item })\r\n  }\r\n\r\n  async doSubmit(onClose) {\r\n    const { item } = this.state;\r\n    const error = this.validate(item);\r\n\r\n    if (error) { toast.error(error); return null; }\r\n\r\n    if (!this.isCommonUser) {\r\n      this.props.form.action(item);\r\n      this.resetTaskData();\r\n      onClose();\r\n    }\r\n\r\n    else {\r\n      try {\r\n        onClose();\r\n        item.idCode = item.idCode.toUpperCase()\r\n\r\n        const userFromCommonMode = await authService.shortIdentification(item.idCode, item.pin);\r\n        item.createdBy = userFromCommonMode.name;\r\n\r\n        delete item.idCode;\r\n        delete item.pin;\r\n\r\n        this.props.form.action(item);\r\n        this.resetTaskData();\r\n      }\r\n      catch (ex) {\r\n        if (ex.response) toast.error(\"Nieprawidłowy kod ID lub PIN\")\r\n        this.submit()\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  submit = () => {\r\n    this.resetOnlyCommonUserData();\r\n\r\n\r\n    confirmAlert({\r\n      customUI: ({ onClose }) => {\r\n        const { title, content, p_label, p_label_2 } = this.props.form;\r\n        const { item } = this.state;\r\n        const defaultContent = item.content || content;\r\n        const defaultQty = item.qty;\r\n        const user = userService.getUserFromJWT();\r\n        let localisations = localisationService.getCurrentUserLocalisations();\r\n\r\n        if (user.isCommonUser) {\r\n          localisations = localisations.filter(vl => vl.category !== \"Magazyn\").map(vl => vl.name);\r\n          localisations.unshift(\"\"); // pusty element jako pierwszy w liście rozwijanej input select\r\n        }\r\n\r\n        return (\r\n          <div className=\"confirmAlertInput\">\r\n            <h1>{title}</h1>\r\n            <div className=\"confirmAlertInput__input-box\">\r\n              {user.isCommonUser && this.renderInputCustomSelect(\"Gdzie\", localisations, \"location\", this.state.item.location)}\r\n              {this.renderInputBoxGroup(p_label, \"content\", \"text\", defaultContent, onClose, \"autoFocus\")}\r\n              {p_label_2 && this.renderInputBoxGroup(p_label_2, \"qty\", \"number\", defaultQty, onClose)}\r\n              {user.isCommonUser && this.renderInputBoxGroup(\"Kod ID\", \"idCode\", \"text\", \"Twój kod ID\", onClose)}\r\n              {user.isCommonUser && this.renderInputBoxGroup(\"PIN\", \"pin\", \"number\", \"Podaj PIN\", onClose)}\r\n\r\n            </div>\r\n            <div className=\"confirmAlertInput__button-group\">\r\n              {this.renderButton(\"Dodaj\", () => this.doSubmit(onClose))}\r\n              {this.renderButton(\"Anuluj\", onClose)}\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    })\r\n  };\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"app__header_headerButtons-wrap\">\r\n        {this.renderButton(this.props.button.label, this.submit, \"btn btn-secondary\")}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormInputTask;","import httpService from \"./httpService\";\r\nimport userService from './userService.js';\r\nimport { toast } from \"react-toastify\";\r\nimport server_path from '../constants/server_URL_paths';\r\n\r\n\r\nconst apiEndPoint = server_path.tasks;\r\n\r\nexport async function getTasks() {\r\n    try {\r\n        const { data: tasks } = await httpService.get(apiEndPoint);\r\n\r\n        if (document.visibilityState === \"visible\") {\r\n            localStorage.setItem(\"lastActivityTime\", new Date().getTime())\r\n        }\r\n        return tasks;\r\n    }\r\n    catch (ex) {\r\n        if (ex && ex.response.status === 423) { } // nic nie rób jak jest odmowa ze strony serwera przez zbyt długi braku aktywności\r\n        else {\r\n            toast.error(\"Nie można uzyskać danych o zdarzeniach.\");\r\n            return [];\r\n        }\r\n    }\r\n}\r\n\r\nexport async function addTask(task) {\r\n    const { data: addedTask } = await httpService.post(apiEndPoint, task);\r\n    return addedTask;\r\n}\r\n\r\nexport async function updateTask(taskToUpdate) {\r\n    const { data: updatedTask } = await httpService.put(apiEndPoint + \"/\" + taskToUpdate._id, taskToUpdate);\r\n    return updatedTask;\r\n}\r\n\r\nexport async function deleteTask(taskToUpdate) {\r\n    const { data: deletedTask } = await httpService.delete(apiEndPoint + \"/\" + taskToUpdate._id);\r\n    return deletedTask;\r\n}\r\n\r\nfunction getFilteredTasks_bySortingStatus(data, currentSortingStatus) { //\r\n    if (currentSortingStatus === \"All\") return data;\r\n    return data.filter(item => item.isDone === currentSortingStatus);\r\n}\r\n\r\nfunction getFilterTasks_byLocation(data, currentLocalisation) { //\r\n    if (currentLocalisation.category === \"Magazyn\") return data\r\n    else if (currentLocalisation.category === \"Utrzymanie ruchu\") return data.filter(item => item.type === \"breakdown\")\r\n    else return data.filter(item => item.location === currentLocalisation.name);\r\n}\r\n\r\nexport function getSortedData(tasks, reduxState) {\r\n    const { reducerTasks, reducerLocalisations } = reduxState\r\n    tasks = getFilterTasks_byLocation(tasks, reducerLocalisations.currentLocalisation);\r\n    tasks = getFilteredTasks_bySortingStatus(tasks, reducerTasks.currentSortingStatus);\r\n    return tasks;\r\n}\r\n\r\nexport function getFilteredColumns(columns, reduxState) {\r\n    const { reducerServiceMode, reducerLocalisations } = reduxState\r\n    const isServiceMode_jobName = (jobName) => {\r\n        const { serviceMode_jobName } = reducerServiceMode;\r\n        if (jobName === \"Koordynator\") {\r\n            return userService.getUserJobValue(serviceMode_jobName) >= userService.getUserJobValue(jobName);\r\n        }\r\n        return serviceMode_jobName === jobName;\r\n    }\r\n\r\n    const { currentLocalisation } = reducerLocalisations;\r\n    const { serviceMode, serviceMode_jobName, managerMode } = reducerServiceMode;\r\n\r\n    const isManagingSet = userService.isThisJobManaging(serviceMode_jobName)\r\n    const filteredColumns = [...columns.common];\r\n\r\n    filteredColumns.push(columns.special.column_takedBy)\r\n\r\n    if (!serviceMode ? userService.isCurrentUserEqualTo(\"Magazynier\") : isServiceMode_jobName(\"Magazynier\")) {\r\n        filteredColumns.push(columns.special.column_take);\r\n    }\r\n    if (!serviceMode ? userService.isCurrentUserEqualTo(\"Operator\") : isServiceMode_jobName(\"Operator\")) {\r\n        filteredColumns.push(columns.special.column_btnClose);\r\n    }\r\n    if (currentLocalisation.category !== \"Utrzymanie ruchu\") {\r\n        if (!serviceMode ? userService.isCurrentUserGreaterThanORequalTo(\"Koordynator\") : isServiceMode_jobName(\"Koordynator\"))\r\n            filteredColumns.push(columns.special.column_createdInFormatedData);\r\n    }\r\n    if (serviceMode ? isManagingSet && managerMode : managerMode) {\r\n        filteredColumns.push(columns.special.column_btnClose);\r\n        filteredColumns.push(columns.special.column_btnDelete)\r\n    }\r\n    if (!serviceMode ? userService.isCurrentUserEqualTo(\"Magazynier\") : isServiceMode_jobName(\"Magazynier\")) {\r\n        filteredColumns.push(columns.special.column_btnClose);\r\n    }\r\n\r\n    return filteredColumns;\r\n}\r\n\r\nexport default {\r\n    getTasks,\r\n    addTask,\r\n    updateTask,\r\n    deleteTask,\r\n    getSortedData,\r\n    getFilteredColumns\r\n}","import { UPDATE_TASKS, CHANGE_CURRENT_SORTING_STATUS, TOGGLE_CHOOSE_MANY_TASKS_MODE, UPDATE_CHOOSED_TASKS_FROM_MANAGER_MODE } from '../constants/actionTypes';\r\n\r\nexport const updateTasks = (tasks) => ({\r\n  type: UPDATE_TASKS,\r\n  tasks: tasks\r\n});\r\nexport const changeCurrentSortingStatuts = (currentSortingStatus) => ({\r\n  type: CHANGE_CURRENT_SORTING_STATUS,\r\n  currentSortingStatus: currentSortingStatus\r\n});\r\nexport const toggleChooseManyTasksMode = (chooseManyTasksMode) => ({\r\n  type: TOGGLE_CHOOSE_MANY_TASKS_MODE,\r\n  chooseManyTasksMode: chooseManyTasksMode\r\n});\r\nexport const updateChoosenTasksFromManagerMode = (selectedTasksIDs_fromManagerMode) => ({\r\n  type: UPDATE_CHOOSED_TASKS_FROM_MANAGER_MODE,\r\n  selectedTasksIDs_fromManagerMode: selectedTasksIDs_fromManagerMode\r\n});\r\n\r\nexport default {\r\n  updateTasks,\r\n  changeCurrentSortingStatuts,\r\n  toggleChooseManyTasksMode,\r\n  updateChoosenTasksFromManagerMode\r\n}\r\n","export const UPDATE_TASKS = 'UPDATE_TASKS';\r\nexport const TOGGLE_SERVICE_MODE = 'TOGGLE_SERVICE_MODE';\r\nexport const CHANGE_SERVICE_MODE_JOB_NAME = 'CHANGE_SERVICE_MODE_JOB_NAME';\r\nexport const TOGGLE_DELETE_TASK_MODE = 'TOGGLE_DELETE_TASK_MODE';\r\nexport const CHANGE_CURRENT_SORTING_STATUS = 'CHANGE_CURRENT_SORTING_STATUS';\r\nexport const CHANGE_CURRENT_LOCALISATION = 'CHANGE_CURRENT_LOCALISATION';\r\nexport const TOGGLE_CHOOSE_MANY_TASKS_MODE = 'TOGGLE_CHOOSE_MANY_TASKS_MODE';\r\nexport const UPDATE_CHOOSEN_TASKS_ARRAY = 'UPDATE_CHOOSEN_TASKS_ARRAY';\r\nexport const UPDATE_CHOOSED_TASKS_FROM_MANAGER_MODE = 'UPDATE_CHOOSED_TASKS_FROM_MANAGER_MODE';\r\n\r\nexport default {\r\n    UPDATE_TASKS,\r\n    TOGGLE_SERVICE_MODE,\r\n    CHANGE_SERVICE_MODE_JOB_NAME,\r\n    TOGGLE_DELETE_TASK_MODE,\r\n    CHANGE_CURRENT_SORTING_STATUS,\r\n    CHANGE_CURRENT_LOCALISATION,\r\n    TOGGLE_CHOOSE_MANY_TASKS_MODE,\r\n    UPDATE_CHOOSEN_TASKS_ARRAY,\r\n    UPDATE_CHOOSED_TASKS_FROM_MANAGER_MODE\r\n}\r\n","import React from 'react';\r\nimport { toast, cssTransition } from 'react-toastify';\r\nimport FormInputTask from '../input forms/formInputTask';\r\nimport taskService from '../../services/taskService';\r\nimport { connect } from 'react-redux';\r\nimport actionsTasks from '../../redux/actions/actionsTasks';\r\n\r\nconst ButtonAddTask = (props) => {\r\n\r\n    const handleAddTask = async (new_task) => {\r\n\r\n        const registered_newTask = await taskService.addTask(new_task);\r\n        const { tasks } = props.reducerTasks;\r\n        tasks.unshift(registered_newTask);\r\n        props.updateTasks(tasks);\r\n\r\n        toast.success(\"Dodano zdarzenie. Wpis pojawi się w ciągu 10 sekund.\", {\r\n            transition: cssTransition({\r\n                enter: 'Toastify__zoom-enter',\r\n                exit: 'Toastify__zoom-exit',\r\n                duration: [500, 800],\r\n            }),\r\n            className: 'position-absolute-center-center'\r\n        });\r\n    }\r\n\r\n    const form_confirmAlertInput_addTask = {\r\n        title: \"Dodaj zdarzenie\",\r\n        p_label: \"Treść\",\r\n        btn_css: \"btn btn-success btn-sm\",\r\n        action: (item) => handleAddTask(item),\r\n    };\r\n\r\n    function renderCustomForm(button) {\r\n        const form = { ...form_confirmAlertInput_addTask };\r\n        form.content = button.label === \"Zamów formatkę\" ? \"\" : button.label;\r\n        form.p_label_2 = button.type === \"order\" ? \"Ilość\" : \"\";\r\n\r\n        return form;\r\n    }\r\n\r\n    return (\r\n        <FormInputTask\r\n            localisation={props.localisation}\r\n            button={props.button}\r\n            form={renderCustomForm(props.button)}\r\n        />\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state;\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateTasks: tasks => dispatch(actionsTasks.updateTasks(tasks)),\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ButtonAddTask)\r\n","import { TOGGLE_SERVICE_MODE, CHANGE_SERVICE_MODE_JOB_NAME, TOGGLE_DELETE_TASK_MODE } from '../constants/actionTypes';\r\n\r\nexport const toggleServiceMode = (bool) => ({\r\n  type: TOGGLE_SERVICE_MODE,\r\n  serviceMode: bool\r\n});\r\nexport const changeServiceMode_jobName = (job_name) => ({\r\n  type: CHANGE_SERVICE_MODE_JOB_NAME,\r\n  serviceMode_jobName: job_name\r\n});\r\nexport const toggleManagerMode = (bool) => ({\r\n  type: TOGGLE_DELETE_TASK_MODE,\r\n  managerMode: bool\r\n});\r\n\r\nexport default {\r\n  toggleServiceMode,\r\n  changeServiceMode_jobName,\r\n  toggleManagerMode\r\n}","import { CHANGE_CURRENT_LOCALISATION } from '../constants/actionTypes';\r\n\r\nexport const changeCurrentLocalisation = (currentLocalisation) => ({\r\n  type: CHANGE_CURRENT_LOCALISATION,\r\n  currentLocalisation: currentLocalisation\r\n});\r\n\r\nexport default {\r\n  changeCurrentLocalisation\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport MenuMainItem from '../common/menuMainItem';\r\nimport MenuItems from '../common/menuItems';\r\nimport ButtonAddTask from '../button components/buttonAddTask';\r\nimport localisationService from '../../services/localisationService';\r\nimport userService from '../../services/userService';\r\nimport client_paths from '../../constants/client_URL_paths';\r\nimport { connect } from 'react-redux';\r\nimport actionsServiceMode from '../../redux/actions/actionsServiceMode';\r\nimport actionsLocalisations from '../../redux/actions/actionsLocalisations';\r\n\r\nconst Tasks_HeaderBar = (props) => {\r\n    const [currentLocalisation, setCurrentLocalisation] = useState(props.reducerLocalisations.currentLocalisation);\r\n    const [serviceMode, setServiceModen] = useState(props.reducerServiceMode.serviceMode);\r\n\r\n    const handleChangeCurrentLocalisation = localisation => {\r\n        setCurrentLocalisation(localisation);\r\n        props.changeCurrentLocalisation(localisation)\r\n    };\r\n    const handleChangeServiceMode = serviceMode => {\r\n        setServiceModen(serviceMode);\r\n        props.toggleServiceMode(serviceMode)\r\n    };\r\n\r\n\r\n\r\n    const headerButtons = [\r\n        { label: \"Zamów formatkę\", type: \"order\" },\r\n        { label: \"Odbiór palet\", type: \"orderTakeout\" },\r\n        { label: \"Awaria\", type: \"breakdown\" },\r\n        { label: \"Przezbrojenie\", type: \"modelChange\" },\r\n        { label: \"Czyszczenie\", type: \"cleaning\" }\r\n    ];\r\n\r\n    const allJobNames = userService.getJobNames();\r\n\r\n    function renderShowDataMenu() {\r\n        const validLocalisations = localisationService.getCurrentUserLocalisations();\r\n        const isAdmin = userService.isCurrentUserGreaterThanORequalTo(\"Admin\");\r\n\r\n        return (\r\n            <div className=\"app__header-barIcon  common-cursor-pointer\" >\r\n                <i className=\"fa far fa-bars fa-3x\"></i>\r\n                <ul className=\"app__header-menu\">\r\n                    {isAdmin && renderServiceModeMainButton()}\r\n                    <MenuMainItem label=\"Ustawienia\" path={client_paths.settings.main} icon=\"fa-cog\" />\r\n                    <MenuItems items={validLocalisations} action={handleChangeCurrentLocalisation} />\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function renderServiceModeMainButton() {\r\n        const toggle = serviceMode ? \"fa fa-toggle-on\" : \"fa fa-toggle-off\";\r\n\r\n        return (\r\n            <li className=\"app__header-menu_item\" onClick={() => handleChangeServiceMode(!serviceMode)} >\r\n                <i className={toggle}></i>\r\n                Tryb testu widoków\r\n            </li>\r\n        )\r\n    }\r\n\r\n    function renderAddTaskButtons() {\r\n        return (\r\n            <div className=\"app__header_header-buttons-wrapper\">\r\n                <i className=\"fa fas fa-cart-arrow-down\"></i>\r\n                <div className=\"app__header_headerButtons\">\r\n                    {headerButtons.map(button =>\r\n                        <ButtonAddTask\r\n                            key={button.label}\r\n                            localisation={currentLocalisation}\r\n                            button={button}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function renderServiceModeButtons() {\r\n        function getCustomServiceBtnStyle(button) {\r\n            const { serviceMode_jobName } = props.reducerServiceMode;\r\n            return button === serviceMode_jobName ? \"btn btn-light btn-sm\" : \"btn btn-outline-light btn-sm\";\r\n        }\r\n\r\n        return (\r\n            <div className=\"app__header_header-buttons-wrapper-service\">\r\n                <i className=\"fa fas fa-cogs\"></i>\r\n                <div className=\"app__header_headerButtons-service\">\r\n                    {allJobNames.map(jobName =>\r\n                        <button\r\n                            key={jobName}\r\n                            className={getCustomServiceBtnStyle(jobName)}\r\n                            onClick={() => props.changeServiceMode_jobName(jobName)}\r\n                        >{jobName}\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCurrentLocalisation(props.reducerLocalisations.currentLocalisation);\r\n        setServiceModen(props.reducerServiceMode.serviceMode);\r\n    }, [props.reducerLocalisations.currentLocalisation, props.reducerServiceMode.serviceMode])\r\n\r\n    const isSupervisor = userService.isCurrentUserGreaterThanORequalTo(\"Koordynator\");\r\n    const isCommonUser = userService.getUserFromJWT().isCommonUser;\r\n\r\n    return (\r\n        <header className=\"app__header\">\r\n            {serviceMode && renderServiceModeButtons()}\r\n            {(currentLocalisation.category === \"Maszyna\" || isCommonUser) && renderAddTaskButtons()}\r\n            <div className=\"app__header_title-barIcon-wrapper\">\r\n                <div className=\"app__header-title\">{currentLocalisation.name}</div>\r\n                {isSupervisor && renderShowDataMenu()}\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state;\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        toggleServiceMode: bool => dispatch(actionsServiceMode.toggleServiceMode(bool)),\r\n        changeServiceMode_jobName: jobName => dispatch(actionsServiceMode.changeServiceMode_jobName(jobName)),\r\n        changeCurrentLocalisation: localisation => dispatch(actionsLocalisations.changeCurrentLocalisation(localisation)),\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Tasks_HeaderBar)\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport actionsServiceMode from '../../redux/actions/actionsServiceMode';\r\nimport actionsTasks from '../../redux/actions/actionsTasks';\r\n\r\nconst ButtonToggleManagerMode = (props) => {\r\n\r\n    const { managerMode } = props.reducerServiceMode\r\n\r\n    const getManagerModeButtonStyle = () => {\r\n\r\n        return (\r\n            (managerMode ? \"btn-dark\" : \"btn-outline-dark\")\r\n            + \" btn btn-sm sorting-buttons-box_managerModeButton\"\r\n        )\r\n    }\r\n\r\n    const reset_selectedTasksIDs_fromManagerMode = () => {\r\n        props.updateChoosenTasksFromManagerMode([])\r\n    }\r\n\r\n    const turnOff_chooseManyTasksMode = () => {\r\n        props.toggleChooseManyTasksMode(false)\r\n    }\r\n\r\n    const checkAndtoggleChooseManyTasksMode = () => {\r\n        props.toggleManagerMode(!managerMode)\r\n\r\n        if (!managerMode) {\r\n            reset_selectedTasksIDs_fromManagerMode();\r\n            turnOff_chooseManyTasksMode();\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <button\r\n            className={getManagerModeButtonStyle()}\r\n            onClick={() => checkAndtoggleChooseManyTasksMode()}\r\n        >{managerMode ? \"Wyłącz tryb\" : \"Tryb zarządzania\"}\r\n        </button>\r\n    )\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state;\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        toggleManagerMode: boolean => dispatch(actionsServiceMode.toggleManagerMode(boolean)),\r\n        toggleChooseManyTasksMode: boolean => dispatch(actionsTasks.toggleChooseManyTasksMode(boolean)),\r\n        updateChoosenTasksFromManagerMode: tasks => dispatch(actionsTasks.updateChoosenTasksFromManagerMode(tasks)),\r\n\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ButtonToggleManagerMode)\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport actionsTasks from '../../redux/actions/actionsTasks';\r\n\r\nconst ButtonToggleChooseManyTasks = (props) => {\r\n\r\n    const { chooseManyTasksMode } = props.reducerTasks;\r\n\r\n    return (\r\n        <button\r\n            className={(chooseManyTasksMode ? \"btn-dark\" : \"btn-outline-dark\") + \" btn btn-sm sorting-buttons-box_chooseManyTasksButton\"}\r\n            onClick={() => props.toggleChooseManyTasksMode(!chooseManyTasksMode)}\r\n        >Zaznacz wiele\r\n        </button>\r\n    )\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state;\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        toggleChooseManyTasksMode: boolean => dispatch(actionsTasks.toggleChooseManyTasksMode(boolean)),\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ButtonToggleChooseManyTasks)\r\n","import React, { Component } from 'react';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\n\r\nclass ConfirmAlert extends Component {\r\n  state = {}\r\n\r\n  submit = () => {\r\n    const { item, itemRepresentation } = this.props;\r\n    const { title, action } = this.props.form;\r\n\r\n    confirmAlert({\r\n      title: title,\r\n      message: this.props.form.message || itemRepresentation,\r\n      buttons: [\r\n        {\r\n          label: 'Potwierdzam',\r\n          onClick: () => action(item)\r\n        },\r\n        {\r\n          label: 'Anuluj',\r\n          onClick: () => { return null }\r\n        }\r\n      ]\r\n    })\r\n  };\r\n\r\n  render() {\r\n    const { btn_label, btn_css, isDisabled = false } = this.props.form;\r\n    const { disableButton = false } = this.props;\r\n\r\n    if (isDisabled) return <button className={\"btn \" + btn_css} >{btn_label} </button>;\r\n    return (\r\n      <button\r\n        className={\"btn \" + btn_css}\r\n        onClick={this.submit}\r\n        disabled={disableButton}\r\n      >{btn_label}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ConfirmAlert;","import React from 'react';\r\nimport ConfirmAlert from '../input forms/confirmAlert';\r\nimport taskService from '../../services/taskService';\r\nimport { connect } from 'react-redux';\r\nimport actionsTasks from '../../redux/actions/actionsTasks';\r\n\r\nconst ButtonDeleteManyTasks = (props) => {\r\n\r\n    const { selectedTasksIDs_fromManagerMode } = props.reducerTasks;\r\n\r\n    const deleteAllChoosenTasks = () => {\r\n        const { tasks } = props.reducerTasks;\r\n        let updated_tasks_list = [...tasks]\r\n\r\n        selectedTasksIDs_fromManagerMode.forEach(async taskId_toDelete => {\r\n\r\n            const index = updated_tasks_list.findIndex(task => task._id === taskId_toDelete);\r\n            if (index < 0) return;\r\n            updated_tasks_list.splice(index, 1);\r\n\r\n            const taskObjectToDelete = { _id: taskId_toDelete };\r\n            await taskService.deleteTask(taskObjectToDelete)\r\n        });\r\n\r\n        props.updateTasks(updated_tasks_list)\r\n        props.updateChoosenTasksFromManagerMode([])\r\n    }\r\n\r\n\r\n\r\n    const form_deleteManyTask = {\r\n        title: \"Potwierdź usunięcie wielu zdarzeń\",\r\n        btn_label: \"Usuń wiele\",\r\n        btn_css: \"btn-outline-danger btn-sm sorting-buttons-box_operationForManyTasksButton\",\r\n        action: () => deleteAllChoosenTasks()\r\n    };\r\n\r\n\r\n    const isButtonDisabled = !props.reducerTasks.chooseManyTasksMode || selectedTasksIDs_fromManagerMode.length <= 0;\r\n\r\n    return (\r\n        <ConfirmAlert form={form_deleteManyTask} disableButton={isButtonDisabled} />\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state;\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateTasks: tasks => dispatch(actionsTasks.updateTasks(tasks)),\r\n        updateChoosenTasksFromManagerMode: tasks => dispatch(actionsTasks.updateChoosenTasksFromManagerMode(tasks)),\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ButtonDeleteManyTasks)\r\n","import React from 'react';\r\nimport ConfirmAlert from '../input forms/confirmAlert';\r\nimport userService from '../../services/userService';\r\nimport taskService from '../../services/taskService';\r\nimport { connect } from 'react-redux';\r\nimport actionsTasks from '../../redux/actions/actionsTasks';\r\n\r\nconst ButtonCloseManyTasks = (props) => {\r\n\r\n    const { selectedTasksIDs_fromManagerMode } = props.reducerTasks;\r\n\r\n    const deleteAllChoosenTasks = () => {\r\n        const { tasks: prev_tasks } = props.reducerTasks;\r\n        let updated_tasks_list = [...prev_tasks]\r\n\r\n        selectedTasksIDs_fromManagerMode.forEach(async taskId_toClose => {\r\n\r\n            const index = updated_tasks_list.findIndex(task => task._id === taskId_toClose);\r\n            if (index < 0) return;\r\n            if (updated_tasks_list[index].isDone) return;\r\n\r\n            const task_toClose = updated_tasks_list[index];\r\n            task_toClose.isDone = true;\r\n            task_toClose.closedBy = userService.getUserFromJWT().name;\r\n\r\n            const closed_task = await taskService.updateTask(task_toClose);\r\n            updated_tasks_list[index] = closed_task;\r\n\r\n        });\r\n\r\n        props.updateTasks(updated_tasks_list)\r\n        props.updateChoosenTasksFromManagerMode([])\r\n    }\r\n\r\n\r\n\r\n    const form_deleteManyTask = {\r\n        title: \"Potwierdź zamknięcie wielu zdarzeń\",\r\n        btn_label: \"Zakończ wiele\",\r\n        btn_css: \"btn-danger btn-sm sorting-buttons-box_operationForManyTasksButton\",\r\n        action: () => deleteAllChoosenTasks()\r\n    };\r\n\r\n\r\n    const isButtonDisabled = !props.reducerTasks.chooseManyTasksMode || selectedTasksIDs_fromManagerMode.length <= 0;\r\n\r\n    return (\r\n        <ConfirmAlert form={form_deleteManyTask} disableButton={isButtonDisabled} />\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state;\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateTasks: tasks => dispatch(actionsTasks.updateTasks(tasks)),\r\n        updateChoosenTasksFromManagerMode: tasks => dispatch(actionsTasks.updateChoosenTasksFromManagerMode(tasks)),\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ButtonCloseManyTasks)\r\n","import React, { useState } from 'react';\r\nimport userService from '../../services/userService';\r\nimport { connect } from 'react-redux';\r\nimport actionsTasks from '../../redux/actions/actionsTasks';\r\nimport ButtonToggleManagerMode from '../button components/buttonToggleManagerMode';\r\nimport ButtonToggleChooseManyTasks from '../button components/buttonToggleChooseManyTasks';\r\nimport ButtonDeleteManyTasks from '../button components/buttonDeleteManyTasks';\r\nimport ButtonCloseManyTasks from '../button components/buttonCloseManyTasks';\r\n\r\n\r\nconst SortingButtons = (props) => {\r\n    const [currentSortingStatus, setCurrentSortingStatus] = useState(false);\r\n\r\n    const sortingButtons = [\r\n        { label: \"W trakcie\", path: false },\r\n        { label: \"Zakończone\", path: true },\r\n        { label: \"Wszystkie\", path: \"All\" }\r\n    ];\r\n\r\n    const handleChangeSortingStatus = currentSortingStatus => {\r\n        setCurrentSortingStatus(currentSortingStatus);\r\n        props.changeCurrentSortingStatuts(currentSortingStatus)\r\n    };\r\n\r\n    function getSortingButtonCustomStyles(buttonPath) {\r\n        return (\r\n            (buttonPath === currentSortingStatus ? \"btn-secondary\" : \"btn-outline-secondary\")\r\n            + \"  btn btn-sm sorting-buttons-box_sortingButton\"\r\n        )\r\n    }\r\n\r\n\r\n    function renderSortingButtons() {\r\n        return (\r\n            sortingButtons.map(button =>\r\n                <button key={button.label}\r\n                    className={getSortingButtonCustomStyles(button.path)}\r\n                    onClick={() => handleChangeSortingStatus(button.path)}\r\n                >{button.label}\r\n                </button>\r\n            )\r\n        )\r\n    }\r\n\r\n    function showButton_managerMode() {\r\n        const { serviceMode, serviceMode_jobName } = props.reducerServiceMode;\r\n        const isManager = userService.isCurrentUserGreaterThanORequalTo(\"Kierownik\");\r\n        return serviceMode ? userService.isThisJobManaging(serviceMode_jobName) : isManager;\r\n    }\r\n\r\n    const { managerMode } = props.reducerServiceMode;\r\n\r\n    return (\r\n        <div className=\"sorting-buttons-box\">\r\n            {!managerMode && <p className=\"sorting-buttons-box_paragraph\">Pokaż zdarzenia:</p>}\r\n            {!managerMode && renderSortingButtons()}\r\n            {showButton_managerMode() && <ButtonToggleManagerMode />}\r\n            {managerMode && <ButtonToggleChooseManyTasks />}\r\n            {managerMode && <ButtonCloseManyTasks />}\r\n            {managerMode && <ButtonDeleteManyTasks />}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state;\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeCurrentSortingStatuts: newStatus => dispatch(actionsTasks.changeCurrentSortingStatuts(newStatus)),\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SortingButtons)\r\n","import React, { Component } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom'\r\nimport { toast } from 'react-toastify';\r\nimport ConfirmAlert from '../input forms/confirmAlert';\r\nimport userService from '../../services/userService';\r\nimport client_paths from '../../constants/client_URL_paths';\r\nimport actionsServiceMode from '../../redux/actions/actionsServiceMode';\r\nimport { connect } from 'react-redux';\r\n\r\nclass LogoutButtonBox extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            user: userService.getUserFromJWT()\r\n        }\r\n    }\r\n\r\n    form_confirmAlert = {\r\n        title: \"Wylogowanie\",\r\n        btn_label: <i className=\"fa fas fa-sign-out\"></i>,\r\n        btn_css: \"btn btn-outline-secondary btn-sm\",\r\n        action: () => this.logout()\r\n    };\r\n\r\n    componentDidMount() {\r\n        const user = userService.getUserFromJWT();\r\n        this.setState({ user });\r\n    }\r\n\r\n    logout = async () => {\r\n        try {\r\n            await userService.logoutUser();\r\n            this.props.toggleServiceMode(false);\r\n            this.props.toggleManagerMode(false);\r\n            this.props.changeServiceMode_jobName(\"Admin\");\r\n        } catch (ex) {\r\n            toast.error(\"Wystąpił błąd podczas wylogowania\")\r\n        }\r\n        finally {\r\n            localStorage.clear();\r\n            this.props.history.push(client_paths.home);\r\n        }\r\n\r\n    };\r\n\r\n    handleInputOnChange = ({ currentTarget: input }) => {\r\n        const user = { ...this.state.user };\r\n        user[input.name] = input.value;\r\n        this.setState({ user })\r\n    };\r\n\r\n    render_pLabel() {\r\n        const { name } = this.state.user;\r\n        const index = name.indexOf(\" \") - 1;\r\n        if (index < 0 && name[index] === \"a\") {\r\n            return \"Jesteś zalogowana jako:\";\r\n        }\r\n        return \"Jesteś zalogowany jako:\"\r\n    }\r\n\r\n    render() {\r\n        const { user } = this.state;\r\n        const showOrHideElement = userService.isCurrentUserGreaterThan(\"Koordynator\") ? \"\" : \"display-flex\";\r\n\r\n        return (\r\n            <div className=\"logout-button-box\">\r\n\r\n                <div className={\"logout-button-box__info \" + showOrHideElement}>\r\n                    <p>{this.render_pLabel()}</p>\r\n                    <Link to={client_paths.settings.user} >\r\n                        <p style={{ textTransform: \"capitalize\" }}>{user.name}</p>\r\n                    </Link>\r\n                </div>\r\n                <ConfirmAlert\r\n                    item={user}\r\n                    itemRepresentation=\"Czy chcesz się wylogować?\"\r\n                    form={this.form_confirmAlert}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state;\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        toggleServiceMode: bool => dispatch(actionsServiceMode.toggleServiceMode(bool)),\r\n        toggleManagerMode: bool => dispatch(actionsServiceMode.toggleManagerMode(bool)),\r\n        changeServiceMode_jobName: jobName => dispatch(actionsServiceMode.changeServiceMode_jobName(jobName)),\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(withRouter(LogoutButtonBox))\r\n","import React from 'react';\r\nimport ConfirmAlert from '../input forms/confirmAlert';\r\nimport userService from '../../services/userService';\r\nimport taskService from '../../services/taskService';\r\nimport { connect } from 'react-redux';\r\nimport actionsTasks from '../../redux/actions/actionsTasks';\r\n\r\nconst ButtonTakeTask = (props) => {\r\n\r\n    const user = userService.getUserFromJWT();\r\n\r\n    const handleTakeTask = async (task) => {\r\n\r\n        task.takedBy = userService.getUserFromJWT().name;\r\n\r\n        const { tasks: prev_tasks } = props.reducerTasks;\r\n        const taked_task = await taskService.updateTask(task);\r\n\r\n        const updated_tasks = [...prev_tasks];\r\n        const index = updated_tasks.findIndex(t => t._id === taked_task._id);\r\n        updated_tasks[index] = taked_task;\r\n\r\n        props.updateTasks(updated_tasks)\r\n    };\r\n\r\n    const getCustomForm = (task) => {\r\n        const currentUserTakedThisTask = task.takedBy === user.name;\r\n        const btnStyle_taskTaked = currentUserTakedThisTask && !task.isDOne ? \"btn-info btn-sm\" : \"btn-outline-secondary btn-sm\";\r\n        const fullText = currentUserTakedThisTask ? \"Obsługujesz\" : (task.takedBy ? \"Przejmij\" : \"Biorę zlecenie\");\r\n        const shortText = currentUserTakedThisTask ? \"T\" : (task.takedBy ? \"P\" : \"B\");\r\n        const title = !task.takedBy ? \"Potwierdź przyjęcie zlecenia\" : (task.takedBy !== user.name ? \"Potwierdź przejęcie zlecenia\" : \"\");\r\n        const btn_css = task.takedBy ? btnStyle_taskTaked : \"btn-warning btn-sm\";\r\n        const btn_label =\r\n            <p>\r\n                <span className=\"task-box_btn-label_full\">{fullText}</span>\r\n                <span className=\"task-box_btn-label_short\">{shortText}</span>\r\n            </p>;\r\n\r\n        return {\r\n            title: title,\r\n            btn_label: btn_label,\r\n            btn_css: btn_css,\r\n            isDisabled: currentUserTakedThisTask,\r\n            action: (task) => handleTakeTask(task)\r\n        };\r\n    };\r\n\r\n    return (\r\n        <ConfirmAlert item={props.task} itemRepresentation={props.task.content} form={getCustomForm(props.task)} />\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state;\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateTasks: tasks => dispatch(actionsTasks.updateTasks(tasks)),\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ButtonTakeTask)\r\n","import React from 'react';\r\nimport ConfirmAlert from '../input forms/confirmAlert';\r\nimport userService from '../../services/userService';\r\nimport taskService from '../../services/taskService';\r\nimport { connect } from 'react-redux';\r\nimport actionsTasks from '../../redux/actions/actionsTasks';\r\n\r\nconst ButtonCloseTask = (props) => {\r\n\r\n    const handleCloseTask = async (task) => {\r\n\r\n        task.isDone = true;\r\n        task.closedBy = userService.getUserFromJWT().name;\r\n\r\n        const closed_task = await taskService.updateTask(task);\r\n\r\n        const { tasks: prev_tasks } = props.reducerTasks;\r\n        const updated_tasks = [...prev_tasks];\r\n        const index = updated_tasks.findIndex(t => t._id === closed_task._id);\r\n        updated_tasks[index] = closed_task;\r\n\r\n        props.updateTasks(updated_tasks)\r\n    }\r\n\r\n    const form_closeTask = {\r\n        title: \"Potwierdź zakończenie zdarzenia\",\r\n        btn_css: \"btn-danger btn-sm\",\r\n        action: (task) => handleCloseTask(task),\r\n        btn_label:\r\n            <p>\r\n                <span className=\"task-box_btn-label_full\">Zakończ</span>\r\n                <span className=\"task-box_btn-label_short\">Z</span>\r\n            </p>,\r\n    };\r\n\r\n\r\n    return (\r\n        <ConfirmAlert item={props.task} itemRepresentation={props.task.content} form={form_closeTask} />\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state;\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateTasks: tasks => dispatch(actionsTasks.updateTasks(tasks)),\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ButtonCloseTask)\r\n","import React from 'react';\r\nimport ConfirmAlert from '../input forms/confirmAlert';\r\nimport taskService from '../../services/taskService';\r\nimport { connect } from 'react-redux';\r\nimport actionsTasks from '../../redux/actions/actionsTasks';\r\n\r\nconst ButtonDeleteTask = (props) => {\r\n\r\n    const handleDeleteTask = async (taskToDelete) => {\r\n        const deleted_task = await taskService.deleteTask(taskToDelete);\r\n        const { tasks: prev_tasks } = props.reducerTasks;\r\n        const updated_tasks = [...prev_tasks];\r\n        const index = updated_tasks.findIndex(t => t._id === deleted_task._id);\r\n        updated_tasks.splice(index, 1);\r\n\r\n        props.updateTasks(updated_tasks)\r\n    };\r\n\r\n    const form_deleteTask = {\r\n        title: \"Potwierdź usunięcie zdarzenia z rejestru\",\r\n        btn_label: <p><span className=\"task-box_btn-label_full\">Usuń</span><span className=\"task-box_btn-label_short\">X</span></p>,\r\n        btn_css: \"btn-outline-danger btn-sm\",\r\n        action: (task) => handleDeleteTask(task)\r\n    };\r\n\r\n    return (\r\n        <ConfirmAlert item={props.task} itemRepresentation={props.task.content} form={form_deleteTask} />\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state;\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateTasks: tasks => dispatch(actionsTasks.updateTasks(tasks)),\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ButtonDeleteTask)\r\n","import React from 'react';\r\nimport Joi from 'joi-browser';\r\nimport { toast } from 'react-toastify';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport ConfirmAlertInput from './confirmAlertInput';\r\n\r\nclass FormPartialDelivery extends ConfirmAlertInput {\r\n  state = {\r\n\r\n  };\r\n  schema = { partialQty: Joi.number().min(1).max(99999).required().error(() => { return { message: this.errorMessage }; }) }\r\n  inputValue = 0;\r\n  originalPartialQty = 0;\r\n  errorMessage = \"Podana ilość musi być określona jako liczba i mieścić się w zakresie 1-9999.\";\r\n\r\n  componentDidMount() {\r\n    this.originalPartialQty = this.props.task.partialQty;\r\n    this.setState({ item: this.props.task })\r\n  };\r\n  handleInputOnChange_partialDelivery = ({ currentTarget: input }) => {\r\n    this.inputValue = input.value;\r\n  };\r\n  resetTaskData() {\r\n    this.inputValue = 0;\r\n  }\r\n  doSubmit(onClose) {\r\n    const { item } = this.state;\r\n    const error = this.validate({ partialQty: this.inputValue });\r\n    if (error) { toast.error(error); return null; }\r\n\r\n    onClose();\r\n    if (item.qty < item.partialQty + parseInt(this.inputValue)) {\r\n      this.confirmGreaterDeliveryThanOrder(item);\r\n    }\r\n    else {\r\n      item.partialQty += parseInt(this.inputValue);\r\n      this.props.form.action(item);\r\n    }\r\n  }\r\n  confirmGreaterDeliveryThanOrder = (item) => {\r\n    confirmAlert({\r\n      title: \"Ostrzeżenie!\",\r\n      message: \"Łączna dostawa będzie większa niż zamówienie. Zatwierdź dostawę lub ją odrzuć.\",\r\n      buttons: [\r\n        {\r\n          label: 'Zatwierdzam',\r\n          onClick: () => { item.partialQty += parseInt(this.inputValue); this.props.form.action(item) }\r\n        },\r\n        {\r\n          label: 'Odrzucam',\r\n          onClick: () => { return }\r\n        }\r\n      ]\r\n    })\r\n  };\r\n\r\n  submit = () => {\r\n    this.resetTaskData();\r\n    confirmAlert({\r\n      customUI: ({ onClose }) => {\r\n        const { title } = this.props.form;\r\n        return (\r\n          <div className=\"confirmAlertInput\">\r\n            <h1>{title}</h1>\r\n            <div className=\"confirmAlertInput__input-box\">\r\n              {this.renderInputBoxGroup(\"Ilość\", \"partialQty\", \"number\", \"Podaj ilość jaką teraz dostarczasz\", onClose, \"autoFocus\", this.handleInputOnChange_partialDelivery)}\r\n            </div>\r\n            <div>\r\n              <p>* Podana wartość zostanie dodana do sumy zrealizowanej dostawy.</p>\r\n            </div>\r\n            <div className=\"confirmAlertInput__button-group\">\r\n              {this.renderButton(\"Dodaj\", () => this.doSubmit(onClose))}\r\n              {this.renderButton(\"Anuluj\", onClose)}\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    })\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        className={\"btn \" + this.props.form.btn_css}\r\n        onClick={this.submit}\r\n      >{this.props.form.btn_label}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormPartialDelivery;","import React from 'react';\r\nimport FormPartialDelivery from '../input forms/formPartialDelivery';\r\nimport taskService from '../../services/taskService';\r\nimport { connect } from 'react-redux';\r\nimport actionsTasks from '../../redux/actions/actionsTasks';\r\n\r\nconst ButtonPartialDelivery = (props) => {\r\n\r\n    const handlePartialDelivery = async (task) => {\r\n\r\n        task.partialTime = 0;\r\n\r\n        const { tasks: prev_tasks } = props.reducerTasks;\r\n        const closed_task = await taskService.updateTask(task);\r\n\r\n        const updated_tasks = [...prev_tasks];\r\n        const index = updated_tasks.findIndex(t => t._id === closed_task._id);\r\n        updated_tasks[index] = closed_task;\r\n\r\n        props.updateTasks(updated_tasks)\r\n    }\r\n\r\n    const form_partialDelivery = {\r\n        title: \"Zarejestruj bierzącą dostawę\",\r\n        btn_css: \"btn-primary btn-sm\",\r\n        action: (task) => handlePartialDelivery(task),\r\n        btn_label:\r\n            <p>\r\n                <span className=\"task-box_btn-label_full\">Dostawa</span>\r\n                <span className=\"task-box_btn-label_short\">D</span>\r\n            </p>,\r\n    };\r\n\r\n    return (\r\n        <FormPartialDelivery task={props.task} form={form_partialDelivery} />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state;\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateTasks: tasks => dispatch(actionsTasks.updateTasks(tasks)),\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ButtonPartialDelivery)\r\n","import React from 'react';\r\n\r\nconst CustomCheckBox = ({ action, item, isChecked, isDisabled = false }) => {\r\n\r\n  const faClass = isChecked ? \"fa fas fa-check fa-check-yes\" : \"fa fas fa-check fa-check-no\";\r\n\r\n  return (\r\n    <button\r\n      className=\"custom-checkbox common-customCheckBox\"\r\n      disabled={isDisabled}\r\n      onClick={() => action(item)}\r\n    >\r\n      <i className={faClass} > </i>\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default CustomCheckBox;","import React from 'react';\r\nimport ButtonTakeTask from '../button components/buttonTakeTask';\r\nimport ButtonCloseTask from '../button components/buttonCloseTask';\r\nimport ButtonDeleteTask from '../button components/buttonDeleteTask';\r\nimport ButtonPartialDelivery from '../button components/buttonPartialDelivery';\r\nimport CustomCheckBox from '../common/customCheckBox';\r\nimport userService from '../../services/userService';\r\nimport taskService from '../../services/taskService';\r\nimport utils from '../../services/utils';\r\nimport actionsTasks from '../../redux/actions/actionsTasks';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Task = (props) => {\r\n\r\n    const { chooseManyTasksMode, selectedTasksIDs_fromManagerMode } = props.reducerTasks;\r\n    const isSelected = selectedTasksIDs_fromManagerMode.includes(props.task._id)\r\n    const user = userService.getUserFromJWT();\r\n\r\n    function addTaskTo_selectedTasksIDs_fromManagerMode(selectedTask, array) {\r\n        props.updateChoosenTasksFromManagerMode([...array, selectedTask._id])\r\n    }\r\n\r\n    function removeTaskFrom_selectedTasksIDs_fromManagerMode(index, array) {\r\n        const updated_choosenTasks_fromManagerMode = [...array]\r\n\r\n        updated_choosenTasks_fromManagerMode.splice(index, 1)\r\n        props.updateChoosenTasksFromManagerMode(updated_choosenTasks_fromManagerMode)\r\n    }\r\n    const handleSetTaskUrgency = async (task) => {\r\n\r\n        if (task.isDone) return;\r\n\r\n        const taskToUpdate = { ...task, isUrgent: !task.isUrgent };\r\n        const updatedTask = await taskService.updateTask(taskToUpdate)\r\n\r\n        const { tasks: prev_tasks } = props.reducerTasks;\r\n        const updated_tasks = [...prev_tasks];\r\n        const index = updated_tasks.findIndex(t => t._id === updatedTask._id);\r\n        updated_tasks[index] = updatedTask;\r\n\r\n        props.updateTasks(updated_tasks)\r\n    }\r\n\r\n    const handleTaskClickInManagerMode = (selected_tasks) => {\r\n        const { selectedTasksIDs_fromManagerMode } = props.reducerTasks;\r\n\r\n        const index = selectedTasksIDs_fromManagerMode.findIndex(taskId => taskId === selected_tasks._id);\r\n\r\n        if (index < 0) {\r\n            addTaskTo_selectedTasksIDs_fromManagerMode(task, selectedTasksIDs_fromManagerMode);\r\n        } else {\r\n            removeTaskFrom_selectedTasksIDs_fromManagerMode(index, selectedTasksIDs_fromManagerMode);\r\n        }\r\n    }\r\n\r\n    function renderCloseButton() {\r\n        const { serviceMode_jobName, managerMode } = props.reducerServiceMode;\r\n\r\n        const isOperator = user.job === 'Operator' || serviceMode_jobName === 'Operator';\r\n        const isMagazynierAndHisTask = user.job === 'Magazynier' || serviceMode_jobName === 'Magazynier';\r\n\r\n        if (isOperator || isMagazynierAndHisTask || managerMode) {\r\n            return <ButtonCloseTask task={task} />;\r\n        }\r\n    }\r\n\r\n    function renderQty(task) {\r\n        const alreadyDelivered = task.partialQty ? task.partialQty : 0;\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"task-box__task_qty-main\">{task.qty}</div>\r\n                {!task.isDone && <div className=\"task-box__task_qty-partialDelivery\">({alreadyDelivered})</div>}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    function renderTaskContent(task) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"task-box__task_content-text\">{task.content}</div>\r\n                <div className=\"task-box__task_content-createdInFormatedData\">{task.createdInFormatedData}</div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    function renderContent(task, column, index) {\r\n\r\n        if (column.path === \"#\") return index;\r\n        else if (column.path === \"content\") return renderTaskContent(task);\r\n        else if (column.path === \"qty\") return task.type === \"order\" ? renderQty(task) : \"\";\r\n        else if (column.path === \"partialQty\") return task.type === \"order\" ? task.partialQty : \"\";\r\n        else if (column.path === \"location\") return task.location;\r\n        else if (column.path === \"time\") return task.time >= 1400 ? \"24h+\" : task.time;\r\n        else if (column.path === \"takedBy\") return renderTakedBy(task);\r\n        else if (column.path === \"btnClose\" && !task.isDone && !chooseManyTasksMode) return renderCloseButton();\r\n        else if (column.path === \"take\" && !task.isDone) {\r\n            if (task.type === \"order\" && task.takedBy === user.name) return <ButtonPartialDelivery task={task} />;\r\n            else if (task.type === \"order\" || task.type === \"orderTakeout\") return <ButtonTakeTask task={task} />;\r\n        }\r\n        else if (column.path === \"createdInFormatedData\") return task.createdInFormatedData;\r\n        else if (column.path === \"btnDelete\") {\r\n            if (chooseManyTasksMode) {\r\n                return (\r\n                    <CustomCheckBox\r\n                        isChecked={isSelected}\r\n                        action={() => { return }}\r\n                    />\r\n                )\r\n            }\r\n            else return <ButtonDeleteTask task={task} />;\r\n        }\r\n    }\r\n\r\n    function renderTakedBy(task) {\r\n        return (\r\n            (task.type === \"order\" || task.type === \"orderTakeout\")\r\n                ?\r\n                (task.takedBy || \"?\")\r\n                :\r\n                task.createdBy\r\n        )\r\n    }\r\n\r\n    function taskCustomCSS(task) {\r\n        if (task.isUrgent && !task.isDone) return \"priority-task\";\r\n        else if (task.isDone) return \"task-box__task-color_ok\";\r\n        else if (task.partialTime >= 10 || task.type === \"breakdown\") return \"task-box__task-color_ng\";\r\n        else if (task.type === \"modelChange\" || task.type === \"cleaning\") return \"task-box__task-color_warning\";\r\n        else { return \"\" };\r\n    }\r\n\r\n\r\n    // return\r\n    const { task, columns, index } = props;\r\n\r\n    return (\r\n        <div\r\n            className={\"task-box__task \" + taskCustomCSS(task)}\r\n            onClick={() => { chooseManyTasksMode && handleTaskClickInManagerMode(task) }}\r\n            onDoubleClick={() => handleSetTaskUrgency(task)}\r\n        >\r\n            {columns.map(column =>\r\n                <div key={task._id + column.path} className={utils.getCustomTaskCss(column.path, \"task\")}>\r\n                    {renderContent(task, column, index)}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state;\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateChoosenTasksFromManagerMode: tasks => dispatch(actionsTasks.updateChoosenTasksFromManagerMode(tasks)),\r\n        updateTasks: tasks => dispatch(actionsTasks.updateTasks(tasks)),\r\n\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Task)","import React from 'react';\r\nimport utils from '../../services/utils';\r\nimport { connect } from 'react-redux';\r\n\r\nconst TaskBoxHeader = (props) => {\r\n\r\n    const invisibleText = props.reducerLocalisations.currentLocalisation.name === \"UTRZYMANIE RUCHU\" ? \" invisible\" : \"\";\r\n    const isVisible = (column) => {\r\n        return column.path === \"qty\" ? invisibleText : \"\";\r\n    };\r\n\r\n    const { tasks } = props.reducerTasks;\r\n    const isThereUrgentTask = tasks.find(task => task.isUrgent && !task.isDone)\r\n    const waringBoxStyle = \"warning-urgetTask \" + (isThereUrgentTask ? \"display-block\" : \"display-none\");\r\n\r\n    return (\r\n        <div className={\"task-box__header\"}>\r\n            <div className={waringBoxStyle}>!</div>\r\n            {props.columns.map(column =>\r\n                <div\r\n                    key={column.path}\r\n                    className={utils.getCustomTaskCss(column.path, \"header\") + isVisible(column)}\r\n                >{column.label}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(\r\n    (state) => { return state }\r\n)(TaskBoxHeader)\r\n","import React from 'react';\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport { FixedSizeList } from \"react-window\";\r\nimport Task from './task';\r\nimport TaskBoxHeader from './taskBoxHeader';\r\nimport taskService from '../../services/taskService';\r\nimport { connect } from 'react-redux';\r\n\r\nconst TaskBox = (props) => {\r\n    // console.log('render show data TaskBox')\r\n\r\n    const columns = {\r\n        common: [\r\n            { label: \"#\", path: \"#\" },\r\n            { label: \"Zdarzenie\", path: \"content\" },\r\n            { label: \"Ilość\", path: \"qty\" },\r\n            { label: \"Dostarczono\", path: \"partialQty\" },\r\n            { label: \"Miejsce\", path: \"location\" },\r\n            { label: \"Czas\", path: \"time\" },\r\n        ],\r\n        special: {\r\n            column_take: { label: \"\", path: \"take\" },\r\n            column_btnClose: { label: \"\", path: \"btnClose\" },\r\n            column_createdInFormatedData: { label: \"Data rejestracji\", path: \"createdInFormatedData\" },\r\n            column_takedBy: { label: \"Obsługuje\", path: \"takedBy\" },\r\n            column_btnDelete: { label: \"\", path: \"btnDelete\" }\r\n        }\r\n    };\r\n\r\n    const reduxState = {\r\n        reducerTasks: props.reducerTasks,\r\n        reducerLocalisations: props.reducerLocalisations,\r\n        reducerServiceMode: props.reducerServiceMode\r\n    };\r\n    const { data: tasks } = props;\r\n    const data = taskService.getSortedData(tasks, reduxState);\r\n    const filteredClumns = taskService.getFilteredColumns(columns, reduxState);\r\n\r\n    return (\r\n        <div className=\"task-box\">\r\n            <TaskBoxHeader columns={filteredClumns} />\r\n            <AutoSizer >\r\n                {({ height, width }) => (\r\n                    <FixedSizeList\r\n                        itemData={data}\r\n                        height={height - 30}\r\n                        width={width}\r\n                        itemCount={data.length}\r\n                        itemSize={43}\r\n                    >\r\n                        {({ data, index, style }) => {\r\n                            const task = data[index];\r\n                            return (\r\n                                <div style={{ ...style }}>\r\n                                    <Task\r\n                                        key={task._id}\r\n                                        index={index + 1}\r\n                                        task={task}\r\n                                        columns={filteredClumns}\r\n                                    >\r\n                                    </Task>\r\n                                </div>\r\n                            )\r\n                        }}\r\n                    </FixedSizeList>\r\n                )}\r\n            </AutoSizer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    (state) => { return state }\r\n)(TaskBox)\r\n","import React from 'react';\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"common__loader_box\">\r\n            <div className=\"common__loader_box_loader\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader;","import React, { Component } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport TasksHeaderBar from './tasksHeaderBar';\r\nimport SortingButtons from './sortingButtons';\r\nimport LogoutButtonBox from '../util compnents/logoutButtonBox';\r\nimport TaskBox from './taskBox';\r\nimport Loader from '../common/loader';\r\nimport localisationService from '../../services/localisationService';\r\nimport taskService from '../../services/taskService';\r\nimport userService from '../../services/userService';\r\nimport client_paths from '../../constants/client_URL_paths';\r\nimport { connect } from 'react-redux';\r\nimport actionsTasks from '../../redux/actions/actionsTasks';\r\nimport actionsLocalisations from '../../redux/actions/actionsLocalisations';\r\n\r\nclass ShowTasks extends Component {\r\n      state = {\r\n            data: []\r\n      };\r\n\r\n      interval_cdm_refreshingData = '' // interwał do oðświeżania danych co 10 sekund\r\n\r\n      async componentDidMount() {\r\n            this.mounted = true;\r\n            this.redirectIfNeeded();\r\n            this.setActivityDetection();\r\n            try {\r\n                  const { pathname } = this.props.location;\r\n                  const currentLocalisation = await localisationService.getCurrentLocalisation(pathname);\r\n                  this.props.changeCurrentLocalisation(currentLocalisation);\r\n\r\n                  const { tasks: data_from_DB } = this.props.reducerTasks;\r\n                  const data = data_from_DB !== null ? data_from_DB : await this.getTasksFromDB_updateReducerState()\r\n                  this.mounted && this.setState({ data });\r\n            } catch (ex) {\r\n                  if (ex.response)\r\n                        toast.error(\"Problem z pobraniem danych z serwera.\")\r\n            }\r\n            this.interval_cdm_refreshingData = this.set_interval_refreshData()// uruchomienie odświeżania danych\r\n      }\r\n\r\n      async getTasksFromDB_updateReducerState() {\r\n            const tasks = await taskService.getTasks();\r\n            this.props.updateTasks(tasks);\r\n            return tasks;\r\n      }\r\n\r\n      static getDerivedStateFromProps(props, state) {\r\n            if (props.reducerTasks.tasks !== state.tasks) {\r\n                  return { data: props.reducerTasks.tasks };\r\n            }\r\n            if (props.reducerServiceMode.serviceMode !== state.serviceMode) {\r\n                  return { serviceMode: props.reducerServiceMode.tasks };\r\n            }\r\n            if (props.reducerServiceMode.serviceMode_jobName !== state.serviceMode_jobName) {\r\n                  return { serviceMode_jobName: props.reducerServiceMode.tasks };\r\n            }\r\n\r\n            return null;\r\n      }\r\n\r\n      componentWillUnmount() {\r\n            this.mounted = false;\r\n            this.remove_intervals_refreshData();\r\n            this.removeActivityDetection();\r\n      }\r\n\r\n      // window event handlers\r\n      setActivityDetection() {\r\n            window.addEventListener(\"visibilitychange\", this.onHideApp)\r\n            window.addEventListener(\"focus\", this.onFocus)\r\n            window.addEventListener(\"blur\", this.onBlur)\r\n      }\r\n\r\n      removeActivityDetection() {\r\n            window.removeEventListener(\"visibilitychange\", this.onHideApp)\r\n            window.removeEventListener(\"focus\", this.onFocus)\r\n            window.removeEventListener(\"blur\", this.onBlur)\r\n      }\r\n\r\n      onFocus = () => {\r\n            // uruchomienie odświeżania danych po powrocie do aplikacji\r\n            this.mounted = true;\r\n            this.interval_onFocus_refreshingData = this.set_interval_refreshData()\r\n      }\r\n\r\n      onBlur = () => {\r\n            // przestanie wysyłania zapytań na serwer wyjściu z zakładki aplikacji\r\n            this.remove_intervals_refreshData();\r\n      }\r\n\r\n      onHideApp = async () => {\r\n            // odświeżenie danych od razu po powrocie do aplikacji\r\n            if (document.visibilityState === \"visible\") {\r\n                  this.mounted && this.setState({\r\n                        data: await taskService.getTasks()\r\n                  });\r\n                  this.remove_intervals_refreshData();\r\n                  this.interval_onHideApp_refreshingData = this.set_interval_refreshData()\r\n            }\r\n            else if (document.visibilityState === \"hidden\") {\r\n                  this.remove_intervals_refreshData();\r\n            }\r\n      }\r\n\r\n      set_interval_refreshData = () => {\r\n            return window.setInterval(\r\n                  async () => {\r\n                        const tasks = await this.getTasksFromDB_updateReducerState();\r\n                        this.mounted && this.setState({ data: tasks })\r\n                  }\r\n                  , 10000)\r\n      }\r\n\r\n      remove_intervals_refreshData() {\r\n            this.mounted = false;\r\n            clearInterval(this.interval_cdm_refreshingData);\r\n            clearInterval(this.interval_onFocus_refreshingData);\r\n            clearInterval(this.interval_onHideApp_refreshingData);\r\n      }\r\n\r\n      // services\r\n\r\n      async redirectIfNeeded() {\r\n            const isCommonUser = userService.getUserFromJWT().isCommonUser;\r\n            const isNormalWorker = userService.isCurrentUserLessThan(\"Koordynator\") && !isCommonUser;\r\n            const seletedLocalisation = await localisationService.getSelectedLocalisation(this.props.match.params.id);\r\n\r\n            if (!seletedLocalisation && isNormalWorker) {\r\n                  this.props.history.push(client_paths.selectLocalisation);\r\n            }\r\n            else if (!isNormalWorker) {\r\n                  this.props.history.push(client_paths.tasks.main);\r\n            }\r\n      }\r\n\r\n      // render\r\n      render() {\r\n            const { data } = this.state;\r\n\r\n            return (\r\n                  <React.Fragment>\r\n                        <TasksHeaderBar />\r\n                        <div className=\"app__content\">\r\n                              <div className=\"app__container-buttons\">\r\n                                    <SortingButtons />\r\n                                    <LogoutButtonBox />\r\n                              </div>\r\n                              {data && data.length === 0 && <Loader />}\r\n                              {data && <TaskBox data={data} />}\r\n                        </div>\r\n                  </React.Fragment>\r\n            );\r\n      }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n      return state;\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n      return {\r\n            updateTasks: tasks => dispatch(actionsTasks.updateTasks(tasks)),\r\n            changeCurrentLocalisation: localisation =>\r\n                  dispatch(actionsLocalisations.changeCurrentLocalisation(localisation)),\r\n      }\r\n};\r\n\r\nexport default connect(\r\n      mapStateToProps,\r\n      mapDispatchToProps\r\n)(ShowTasks)\r\n","import httpService from \"./httpService\";\r\nimport { toast } from \"react-toastify\";\r\nimport filesaver from 'file-saver';\r\nimport server_path from '../constants/server_URL_paths';\r\n\r\nconst apiEndPoint = server_path.getTasksInExcelFile;\r\n\r\nexport async function getTasksInExcelFile() {\r\n    try {\r\n        const fileName = getFileName();\r\n        const { data } = await httpService.get(apiEndPoint, { responseType: 'arraybuffer' });\r\n        const blob = new Blob([data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet; base64' })\r\n        filesaver.saveAs(blob, fileName);\r\n    }\r\n    catch (ex) {\r\n        toast.error(\"Nie można ściągnąć pliku.\")\r\n    }\r\n}\r\n\r\nfunction getFileName() {\r\n    const timeOnServer_GMT0 = new Date().getTime();\r\n    const timeOffset_Poland = -120;\r\n    const localTimeInPoland = timeOnServer_GMT0 - timeOffset_Poland * 60 * 1000; // local Time in Poland\r\n    const date = new Date(localTimeInPoland).toISOString();\r\n    const day = date.slice(0, 10);\r\n    const hour = date.slice(11, 13);\r\n    const minutes = date.slice(14, 16);\r\n    const seconds = date.slice(17, 19);\r\n\r\n    return \"FILMAG-Wykaz zdarzeń - \" + day + \"-\" + hour + minutes + seconds + \".xlsx\";\r\n}\r\n\r\nexport default {\r\n    getTasksInExcelFile\r\n}\r\n","import React from 'react';\r\nimport MenuMainItem from '../common/menuMainItem';\r\nimport MenuItems from '../common/menuItems';\r\nimport userService from '../../services/userService';\r\nimport taskToExcellFileService from '../../services/taskToExcelService';\r\n\r\nfunction getTaskInExcelFile() {\r\n    taskToExcellFileService.getTasksInExcelFile();\r\n}\r\n\r\nconst SettingsHeaderBar = ({ validLocations }) => {\r\n    const isSupervisor = userService.isCurrentUserGreaterThanORequalTo(\"Koordynator\");\r\n\r\n    return (\r\n        <header className=\"app__header\">\r\n            <div className=\"app__header-title\">Ustawienia</div>\r\n            {isSupervisor && <div className=\"app__header-barIcon\" >\r\n                <i className=\"fa fas fa-bars fa-3x\"></i>\r\n                <ul className=\"app__header-menu\">\r\n                    <MenuMainItem label=\"Wyświetl zdarzenia\" path=\"/show-data\" icon=\"fa-align-justify\" />\r\n                    <MenuItems items={validLocations} action={() => { return null }} />\r\n                    <li className=\"app__header-menu_item app__header-menu_item-option\" onClick={getTaskInExcelFile}><i className=\"fa fa-download\"></i>Pobierz zdarzenia do excel</li>\r\n                </ul>\r\n            </div>}\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default SettingsHeaderBar;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst LinkWithButton = ({label, path, css = \"btn btn-secondary btn-sm\"}) => {\r\n    return ( \r\n        <Link to={ path } >\r\n            <button className={css}>{ label }</button>\r\n        </Link>\r\n     );\r\n}\r\n \r\nexport default LinkWithButton;","import React from 'react';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport ConfirmAlertInput from './confirmAlertInput';\r\n\r\nclass ConfirmAlertSettings extends ConfirmAlertInput {\r\n  state = {};\r\n\r\n  doSubmit(onClose) {\r\n    const { item } = this.state;\r\n    this.props.form.action(item);\r\n    onClose();\r\n  }\r\n  submit = () => {\r\n    confirmAlert({\r\n      customUI: ({ onClose }) => {\r\n        const { title, p_label, p_label_2, placeholder_1, placeholder_2, input_1_type = \"text\", name_1 = \"name\", name_2 } = this.props.form;\r\n        return (\r\n          <div className=\"confirmAlertInput\">\r\n            <h1>{title}</h1>\r\n            <div className=\"confirmAlertInput__input-box\">\r\n              {this.renderInputBoxGroup(p_label, name_1, input_1_type, placeholder_1, onClose, \"autoFocus\")}\r\n              {p_label_2 && this.renderInputBoxGroup(p_label_2, name_2, \"text\", placeholder_2, onClose)}\r\n            </div>\r\n            <div className=\"confirmAlertInput__button-group\">\r\n              {this.renderButton(\"Dodaj\", () => this.doSubmit(onClose))}\r\n              {this.renderButton(\"Anuluj\", onClose)}\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    })\r\n  };\r\n\r\n  render() {\r\n    const { btn_css, btn_label } = this.props.form;\r\n    return this.renderButton(btn_label, this.submit, btn_css);\r\n  }\r\n}\r\n\r\nexport default ConfirmAlertSettings;","import React from 'react';\r\n\r\nconst InputCustomSelect = ({ options, currentValue, item, isDisabled = false, onChange }) => {\r\n    return (\r\n        <div>\r\n            <select\r\n                className=\"custom-select\"\r\n                data-style=\"btn-primary\"\r\n                name={item}\r\n                onChange={onChange}\r\n                value={currentValue}\r\n                disabled={isDisabled}\r\n            >\r\n                {options.map(option =>\r\n                    <option key={option} value={option}>{option}</option>\r\n                )}\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InputCustomSelect;","import React, { PureComponent } from 'react';\r\n\r\nclass UserRecord extends PureComponent {\r\n    state = {}\r\n    render() {\r\n        const { user, columns, renderCellContent } = this.props;\r\n        return (\r\n            <div className=\"user__wrapper\">\r\n                <div key={user._id}\r\n                    className=\"user\">\r\n                    {columns.map(column =>\r\n                        <div key={user._id + column.path} className=\"user__content\"\r\n                        >{renderCellContent(user, column)}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserRecord;","import React, { Component } from 'react';\r\nimport Joi from 'joi-browser';\r\nimport { FixedSizeList } from \"react-window\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport LinkWithButton from '../common/linkWithButton';\r\nimport ConfirmAlert from '../input forms/confirmAlert';\r\nimport ConfirmAlertSettings from '../input forms/confirmAlertSettings';\r\nimport LogoutButtonBox from '../util compnents/logoutButtonBox';\r\nimport InputCustomSelect from '../input forms/inputCustomSelect';\r\nimport CustomCheckBox from '../common/customCheckBox';\r\nimport SettingsUserRecord from './userRecord';\r\nimport Loader from '../common/loader';\r\nimport userService from '../../services/userService';\r\nimport client_paths from '../../constants/client_URL_paths';\r\nimport { toast } from 'react-toastify';\r\n\r\nclass Users extends Component {\r\n    state = {\r\n        users: [],\r\n    };\r\n    // forms and variables\r\n    form_deleteUser = {\r\n        title: \"Potwierdź usunięcie konta\",\r\n        btn_label: <p><span className=\"user__content_btn-label_full\">Usuń konto</span><span className=\"user__content_btn-label_short\">X</span></p>,\r\n        btn_css: \"btn btn-danger btn-sm\",\r\n        action: (user) => this.handleDeleteUser(user)\r\n    };\r\n    form_resetPassword = {\r\n        title: \"Resetowanie hasło\",\r\n        btn_label: <p><span className=\"user__content_btn-label_full\">Resetuj hasło</span><span className=\"user__content_btn-label_short\">R</span></p>,\r\n        message: `Resetujesz hasło użytkownika. Nowe hasło: 12345.`,\r\n        btn_css: \"btn btn-secondary btn-sm\",\r\n        action: (user) => this.handleResetPassword(user)\r\n    };\r\n    form_addteUser = {\r\n        title: \"Dodaj konto użytkownika\",\r\n        p_label: \"Login\",\r\n        btn_label: \"Dodaj nowe konto\",\r\n        placeholder_1: \"Podaj nazwę użytkownika\",\r\n        btn_css: \"btn btn-success btn-sm\",\r\n        action: (inputData) => this.handleAddUser(inputData)\r\n    };\r\n    columns = [\r\n        { label: \"#\", path: \"#\" },\r\n        { label: \"Pracownik\", path: \"name\" },\r\n        { label: \"Stanowisko\", path: \"userJob\" },\r\n        { label: <i className=\"fa fas fa-desktop\"></i>, path: \"status\" },\r\n        {\r\n            label:\r\n                <div>\r\n                    <span className=\"user__content_btn-label_full\">Magazyn</span>\r\n                    <span className=\"user__content_btn-label_short\">MG</span>\r\n                </div>,\r\n            path: \"Magazyn\"\r\n        },\r\n        {\r\n            label:\r\n                <div>\r\n                    <span className=\"user__content_btn-label_full\">Maszyny</span>\r\n                    <span className=\"user__content_btn-label_short\">MS</span>\r\n                </div>,\r\n            path: \"Maszyny\"\r\n        },\r\n        {\r\n            label:\r\n                <div>\r\n                    <span className=\"user__content_btn-label_full\">Utrzymanie ruchu</span>\r\n                    <span className=\"user__content_btn-label_short\">UR</span>\r\n                </div>,\r\n            path: \"Utrzymanie ruchu\"\r\n        },\r\n        { label: \"\", path: \"btn-reset\" }\r\n    ];\r\n    options = userService.getJobNames();\r\n    schema = {\r\n        name: Joi.string().min(5).required().error(() => { return { message: \"Podana nazwa jest za krótka. Minimum to 5 znaków.\" }; }),\r\n        password: Joi.string().min(5).required().error(() => { return { message: \"Podane hasło jest za krótkie. Minimum to 5 znaków.\" }; })\r\n    };\r\n    // basic\r\n    constructor() {\r\n        super();\r\n        const isAdmin = userService.isCurrentUserGreaterThanORequalTo(\"Admin\");\r\n        if (isAdmin) {\r\n            this.columns.push({ label: \"\", path: \"btn-delete\" })\r\n        }\r\n    };\r\n    async componentDidMount() {\r\n        this.setState({ users: await userService.getUsers() });\r\n    };\r\n    // handlers\r\n    handleDeleteUser = async (userToDelete) => {\r\n        try {\r\n            const user = await userService.deleteUser(userToDelete);\r\n            let users = [...this.state.users];\r\n\r\n            const index = users.findIndex(u => u._id === user._id);\r\n            if (index < 0) return;\r\n\r\n            users.splice(index, 1)\r\n            this.setState({ users });\r\n        }\r\n        catch (ex) {\r\n            if (ex && ex.response) toast.error(ex.response.data)\r\n        }\r\n    };\r\n    handleAddUser = async inputData => {\r\n\r\n        try {\r\n            const newUserData = {\r\n                name: inputData.name,\r\n                password: \"12345\"\r\n            };\r\n\r\n            const error = this.validateNewUser(newUserData);\r\n            if (error) {\r\n                toast.error(error)\r\n                return null;\r\n            }\r\n\r\n            const newUser = await userService.addUser(newUserData);\r\n            const users = [...this.state.users];\r\n            users.unshift(newUser);\r\n\r\n            this.setState({ users });\r\n\r\n        } catch (ex) {\r\n            if (ex && ex.response) toast.error(ex.response.data)\r\n        }\r\n    };\r\n    handleResetPassword = async user => {\r\n        try {\r\n            await userService.resetUserPassword({ _id: user._id, password: \"12345\" });\r\n            toast.info(\"Zmieniono hasło użytkownika.\")\r\n        }\r\n        catch (ex) {\r\n            if (ex && ex.response) toast.error(ex.response.data);\r\n        }\r\n    };\r\n    // services\r\n    validateNewUser(user) {\r\n        const { error } = Joi.validate(user, this.schema);\r\n        return error ? error.details[0].message : null;\r\n    };\r\n    updateUserPermissions = async ({ user, area }) => {\r\n        const userWithLocalyChangedPermissions = this.chamgeUserPermisions(user, area);\r\n        const updatedUserInDataBase = await userService.updateUser(userWithLocalyChangedPermissions);\r\n\r\n        const users = [...this.state.users];\r\n        const index = users.findIndex(user => user._id === updatedUserInDataBase._id);\r\n        users[index] = updatedUserInDataBase;\r\n        this.setState({ users });\r\n    };\r\n    chamgeUserPermisions(user, area) {\r\n        const index = user.permissions.indexOf(area);\r\n        if (index >= 0) {\r\n            user.permissions.splice(index, 1);\r\n        }\r\n        else {\r\n            user.permissions.push(area);\r\n        }\r\n        return user;\r\n    }\r\n    selectOptions(user) {\r\n        const isOptionButtonDissabled = userService.isCurrentUserLessThanORequalTo(user.job);\r\n        const options = [...this.options];\r\n        const index = options.indexOf(userService.getUserFromJWT().job);\r\n        return isOptionButtonDissabled ? [user.job] : options.splice(index + 1);\r\n    }\r\n    isChecked(userPermissions, area) {\r\n        return userPermissions.indexOf(area) >= 0\r\n    };\r\n    // render functions\r\n    handleInputOnChange = async ({ currentTarget: input }) => {\r\n        const users = [...this.state.users];\r\n        const index = users.findIndex(u => u._id === input.name);\r\n        const user = users[index];\r\n\r\n        user.job = input.value;\r\n\r\n        if (input.value === \"Współdzielone\") {\r\n            user.isCommonUser = true;\r\n        }\r\n        else user.isCommonUser = false;\r\n\r\n        users[index] = await userService.updateUser(user);\r\n\r\n        this.setState({ users })\r\n    };\r\n    renderCheckBox(user, area) {\r\n        const isDisabled = userService.isCurrentUserLessThanORequalTo(user.job);\r\n        return (\r\n            <CustomCheckBox\r\n                item={{ user, area }}\r\n                isChecked={this.isChecked(user.permissions, area)}\r\n                isDisabled={isDisabled}\r\n                action={(user) => this.updateUserPermissions(user)}\r\n            />\r\n        )\r\n    };\r\n    renderUserStatus(user) {\r\n        return (\r\n            <div className={\"fa far fa-user\" + (user.isLogged ? \" text-success\" : \" text-muted\")}></div>\r\n        )\r\n    }\r\n    renderButton(user, form) {\r\n        const isDisabled = userService.isCurrentUserLessThanORequalTo(user.job);\r\n        return (\r\n            <ConfirmAlert\r\n                item={user}\r\n                itemRepresentation={user.name}\r\n                form={form}\r\n                disableButton={isDisabled}\r\n            />\r\n        )\r\n    };\r\n    renderInputCustomSelect(user) {\r\n        const isDisabled = userService.isCurrentUserLessThanORequalTo(user.job);\r\n        return (\r\n            <InputCustomSelect\r\n                item={user._id}\r\n                currentValue={user.job}\r\n                isDisabled={isDisabled}\r\n                options={this.selectOptions(user)}\r\n                onChange={this.handleInputOnChange}\r\n            />\r\n        )\r\n    };\r\n    renderAddUserButton() {\r\n        return (\r\n            <ConfirmAlertSettings form={this.form_addteUser} />\r\n        )\r\n    };\r\n    renderCellContent = (user, column) => {\r\n        const { users } = this.state;\r\n\r\n        if (column.path === \"#\") return users.indexOf(user) + 1;\r\n        else if (column.path === \"name\") return user.name;\r\n        else if (column.path === \"userJob\") return this.renderInputCustomSelect(user);\r\n        else if (column.path === \"status\") return this.renderUserStatus(user);\r\n        else if (column.path === \"Magazyn\") return this.renderCheckBox(user, \"Magazyn\");\r\n        else if (column.path === \"Maszyny\") return this.renderCheckBox(user, \"Maszyna\");\r\n        else if (column.path === \"Utrzymanie ruchu\") return this.renderCheckBox(user, \"Utrzymanie ruchu\");\r\n        else if (!user.isDone && column.path === \"btn-reset\") return this.renderButton(user, this.form_resetPassword)// kolumna dla przycisku resetu hasła\r\n        else if (!user.isDone && column.path === \"btn-delete\") return this.renderButton(user, this.form_deleteUser) // kolumna dla przycisku usunięcia konta\r\n        return;\r\n    };\r\n    renderHeader() {  // podobne\r\n        return (\r\n            <div className=\"user user__header\">\r\n                {this.columns.map(column =>\r\n                    <div key={column.path} className=\"user__content\">{column.label}</div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n    renderUsers() {  // podobne\r\n        return (\r\n            <AutoSizer >\r\n                {({ height, width }) => (\r\n                    <FixedSizeList\r\n                        itemData={this.state.users}\r\n                        height={height - 75}\r\n                        width={width}\r\n                        itemCount={this.state.users.length}\r\n                        itemSize={50}\r\n                    >\r\n                        {({ data, index, style }) => {\r\n                            const user = data[index];\r\n                            return (\r\n                                <div style={{ ...style }}>\r\n                                    <SettingsUserRecord\r\n                                        user={user}\r\n                                        columns={this.columns}\r\n                                        renderCellContent={this.renderCellContent}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        }}\r\n                    </FixedSizeList>\r\n                )}\r\n            </AutoSizer>\r\n        )\r\n    };\r\n\r\n    // main render\r\n    render() {\r\n        const isAdmin = userService.isCurrentUserGreaterThanORequalTo(\"Admin\");\r\n\r\n        return (\r\n            <div className=\"app__content\">\r\n                <div className=\"app__container-buttons\">\r\n                    <div className=\"settings__switch-buttons\">\r\n                        <LinkWithButton label=\"Wyświetl zdarzenia\" path={client_paths.tasks.main} css={\"btn btn-sm btn-primary\"} />\r\n                        <LinkWithButton label=\"Lokalizacje\" path={client_paths.settings.localisations} />\r\n                        <LinkWithButton label=\"Mój profil\" path={client_paths.settings.user} />\r\n                        {isAdmin && this.renderAddUserButton()}\r\n                    </div>\r\n                    <LogoutButtonBox />\r\n                </div>\r\n\r\n                <div className=\"users\">\r\n                    {this.renderHeader()}\r\n                    {this.state.users && this.state.users.length === 0 && <Loader />}\r\n                    {this.renderUsers()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Users;","import React, { Component } from 'react';\r\nimport Joi from 'joi-browser';\r\nimport { toast } from 'react-toastify';\r\nimport LinkWithButton from '../common/linkWithButton';\r\nimport ConfirmAlert from '../input forms/confirmAlert';\r\nimport ConfirmAlertSettings from '../input forms/confirmAlertSettings';\r\nimport InputCustomSelect from '../input forms/inputCustomSelect';\r\nimport LogoutButtonBox from '../util compnents/logoutButtonBox';\r\nimport userService from '../../services/userService';\r\nimport localisationService from '../../services/localisationService';\r\nimport Loader from '../common/loader';\r\nimport client_paths from '../../constants/client_URL_paths';\r\n\r\nclass Localisations extends Component {\r\n    constructor() {\r\n        super();\r\n        const isAdmin = userService.isCurrentUserGreaterThanORequalTo(\"Admin\");\r\n        if (isAdmin) this.columns.push({ label: \"\", path: \"btn-delete\" })\r\n    }\r\n\r\n    state = {\r\n        localisations: []\r\n    };\r\n\r\n    columns = [\r\n        { label: \"#\", path: \"#\" },\r\n        { label: \"Nazwa\", path: \"name\" },\r\n        { label: \"Kategoria\", path: \"category\" }\r\n    ];\r\n\r\n    options = [\"\", ...localisationService.getLocalisationNames()];\r\n\r\n    form_confirmAlert = {\r\n        title: 'Potwierdź usunięcie lokalizacji',\r\n        btn_label: <p><span className=\"localisation__content_btn-label_full\">Usuń lokalizację</span><span className=\"localisation__content_btn-label_short\">X</span></p>,\r\n        btn_css: \"btn-danger btn-sm\",\r\n        action: (localisation) => this.handleDeleteLocalisation(localisation)\r\n    };\r\n\r\n    form_addLocalisation = {\r\n        title: \"Dodaj nową lokalizację\",\r\n        p_label: \"Nazwa\",\r\n        placeholder_1: \"Podaj nazwę lokalizacji\",\r\n        btn_label: \"Dodaj nową lokalizację\",\r\n        btn_css: \"btn btn-success btn-sm\",\r\n        action: (localisation) => this.handleAddLocalisation(localisation)\r\n    };\r\n\r\n    schema = {\r\n        name: Joi.string().min(1).max(255).required().error(() => { return { message: \"Podana nazwa jest za krótka. Minimum to 1 znak.\" }; }),\r\n    };\r\n\r\n    async componentDidMount() {\r\n        this.setState({ localisations: await localisationService.getLocalisations() })\r\n    };\r\n    validateNewLocalisation(localisation) {\r\n        const { error } = Joi.validate(localisation, this.schema);\r\n        return error ? error.details[0].message : null;\r\n    };\r\n\r\n    handleDeleteLocalisation = async (localisationToDelete) => {\r\n        try {\r\n            const localisation = await localisationService.deleteLocalisation(localisationToDelete);\r\n            const localisations = this.state.localisations;\r\n\r\n            const index = localisations.findIndex(l => l._id === localisation._id);\r\n            if (index < 0) return;\r\n\r\n            localisations.splice(index, 1)\r\n            this.setState({ localisations });\r\n        }\r\n        catch (ex) {\r\n            if (ex && ex.response) toast.error(ex.response.data)\r\n        }\r\n    };\r\n    handleAddLocalisation = async localisation => {\r\n\r\n        try {\r\n            const error = this.validateNewLocalisation(localisation);\r\n            if (error) {\r\n                toast.error(error);\r\n                return null;\r\n            }\r\n\r\n            const newLocalisation = await localisationService.addLocalisation(localisation);\r\n            const localisations = this.state.localisations;\r\n            localisations.unshift(newLocalisation);\r\n            this.setState({ localisations });\r\n        }\r\n        catch (ex) {\r\n            if (ex && ex.response) toast.error(ex.response.data)\r\n        }\r\n    };\r\n    renderInputCustomSelect(localisation) {\r\n        return (\r\n            <InputCustomSelect\r\n                item={localisation._id}\r\n                currentValue={localisation.category}\r\n                options={this.options}\r\n                onChange={this.handleInputOnChange}\r\n            />\r\n        )\r\n    };\r\n\r\n    handleInputOnChange = async ({ currentTarget: input }) => {\r\n        try {\r\n            const localisations = [...this.state.localisations];\r\n            const index = localisations.findIndex(l => l._id === input.name);\r\n            let localisation = localisations[index];\r\n            localisation.category = input.value;\r\n            localisations[index] = await localisationService.updateLocalisation(localisation);\r\n\r\n            const sortedLocalisations = localisationService.sortLocalisationsOrder(localisations);\r\n            localisationService.setUserLocalisations(sortedLocalisations);\r\n\r\n            this.setState({ localisations: sortedLocalisations });\r\n        }\r\n        catch (ex) {\r\n            if (ex && ex.response) {\r\n                toast.error(ex.response.data)\r\n            }\r\n        }\r\n    };\r\n\r\n    renderCellContent = (localisation, column) => {\r\n        const { localisations } = this.state;\r\n        const form_confirmAlert = this.form_confirmAlert;\r\n        if (column.path === \"#\") return localisations.indexOf(localisation) + 1;// kolumna dla lp.\r\n        else if (column.path === \"name\") return localisation.name// kolumna zaznaczania czy lokalizacja widzi wszystko\r\n        else if (column.path === \"category\") return this.renderInputCustomSelect(localisation)// kolumna zaznaczania czy lokalizacja widzi wszystko\r\n        else if (column.path === \"btn-delete\") return this.renderConfirmAlert(localisation, form_confirmAlert) // kolumna dla przycisku\r\n    };\r\n\r\n    renderConfirmAlert(area, form) {\r\n        return (\r\n            <ConfirmAlert\r\n                item={area}\r\n                itemRepresentation={area.name}\r\n                form={form}\r\n            />\r\n        )\r\n    };\r\n\r\n    renderAddLocalisationButton() {\r\n        return <ConfirmAlertSettings form={this.form_addLocalisation} />\r\n    };\r\n\r\n    renderHeader(columns, mainDivCSS, contentCSS) {  // podobne\r\n        return (\r\n            <div className={mainDivCSS}>\r\n                {columns.map(column => <div key={column.path} className={contentCSS}>{column.label}</div>)}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderLocalisations(localisations, mainDivCSS, itemCSS, contentCSS) {  // podobne\r\n        return (\r\n            <div className={mainDivCSS}>\r\n                {localisations.map(user =>\r\n                    <div key={user._id}\r\n                        className={itemCSS}>\r\n                        {this.columns.map(column =>\r\n                            <div key={user._id + column.path} className={contentCSS}\r\n                            >{this.renderCellContent(user, column)}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n    render() {\r\n        const isAdmin = userService.isCurrentUserGreaterThanORequalTo(\"Admin\");\r\n        const { localisations } = this.state;\r\n\r\n        return (\r\n            <div className=\"app__content\">\r\n                <div className=\"app__container-buttons\">\r\n                    <div className=\"settings__switch-buttons\">\r\n                        <LinkWithButton label=\"Wyświetl zdarzenia\" path={client_paths.tasks.main} css={\"btn btn-sm btn-primary\"} />\r\n                        <LinkWithButton label=\"Użytkownicy\" path={client_paths.settings.users} />\r\n                        <LinkWithButton label=\"Mój profil\" path={client_paths.settings.user} />\r\n                        {isAdmin && this.renderAddLocalisationButton()}\r\n                    </div>\r\n                    <LogoutButtonBox />\r\n                </div>\r\n                <div className=\"localisations\">\r\n                    {this.renderHeader(this.columns, \"localisation localisation__header\", \"localisation__content\")}\r\n                    {localisations && localisations.length === 0 && <Loader />}\r\n                    {this.renderLocalisations(localisations, \"localisation__wrapper\", \"localisation\", \"localisation__content\")}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Localisations;","import React, { Component } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport Joi from 'joi-browser';\r\nimport LinkWithButton from '../common/linkWithButton';\r\nimport ConfirmAlertSettings from '../input forms/confirmAlertSettings';\r\nimport LogoutButtonBox from '../util compnents/logoutButtonBox';\r\nimport userService from '../../services/userService';\r\nimport authService from '../../services/authService';\r\nimport client_paths from '../../constants/client_URL_paths';\r\n\r\nclass UserPage extends Component {\r\n    state = {\r\n        user: {}\r\n    }\r\n\r\n    form_resetPassword = {\r\n        title: \"Zmień hasło\",\r\n        p_label: \"Obecne\",\r\n        input_1_type: \"password\",\r\n        name_1: \"password\",\r\n        p_label_2: \"Nowe\",\r\n        name_2: \"newPassword\",\r\n        btn_label: \"Zmień hasło\",\r\n        btn_css: \"btn btn-outline-danger btn-sm\",\r\n        action: (pwd) => this.handleResetPassword(pwd)\r\n    };\r\n    form_resetPIN = {\r\n        title: \"Zmień PIN\",\r\n        p_label: \"Hasło\",\r\n        p_label_2: \"Nowy PIN\",\r\n        input_1_type: \"password\",\r\n        name_1: \"password\",\r\n        name_2: \"newPIN\",\r\n        placeholder_1: \"Podaj obecne hasło\",\r\n        placeholder_2: \"Podaj nowe hasło\",\r\n        btn_label: \"Zmień PIN\",\r\n        btn_css: \"btn btn-outline-danger btn-sm\",\r\n        action: (pin) => this.handleResetPIN(pin)\r\n    };\r\n    errorMessage = {\r\n        password: \"Podane hasło jest za krótkie. Minimum to 5 znaków\",\r\n        newPin: \"Niepoprawna długość PIN. ILość znaków musi wynosić 4\"\r\n    }\r\n    schemaPassword = {\r\n        password: Joi.string().min(5).required().error(() => { return { message: this.errorMessage.password }; }),\r\n        newPassword: Joi.string().min(5).required().error(() => { return { message: this.errorMessage.password }; })\r\n    };\r\n    schemaPIN = {\r\n        password: Joi.string().min(5).required().error(() => { return { message: this.errorMessage.password }; }),\r\n        newPIN: Joi.string().min(4).max(4).required().error(() => { return { message: this.errorMessage.newPin }; })\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const user = userService.getUserFromJWT();\r\n        this.setState({ user });\r\n    };\r\n\r\n    handleResetPassword = async ({ password, newPassword }) => {\r\n        let user = { ...this.state.user };\r\n        const error = this.validateNewCredencials({ password, newPassword }, this.schemaPassword);\r\n\r\n        if (error) {\r\n            toast.error(error);\r\n            return null;\r\n        }\r\n        try {\r\n            const token = await userService.resetUserPassword({ _id: user._id, password, newPassword });\r\n            authService.setJwt(token)\r\n\r\n            toast.success(\"Zaktualizowano hasło\");\r\n            this.setState({ user: userService.getUserFromJWT() })\r\n        }\r\n        catch (ex) {\r\n            if (ex.response)\r\n                toast.error(ex.response.data);\r\n        }\r\n    };\r\n\r\n    async handleResetPIN({ password, newPIN }) {\r\n        let user = { ...this.state.user };\r\n        const error = this.validateNewCredencials({ password, newPIN }, this.schemaPIN);\r\n\r\n        if (error) {\r\n            toast.error(error);\r\n            return null;\r\n        }\r\n        try {\r\n            const token = await userService.resetUserPIN({ _id: user._id, password, newPIN });\r\n            authService.setJwt(token)\r\n            this.setState({ user: userService.getUserFromJWT() })\r\n\r\n            toast.success(\"Zaktualizowano PIN\");\r\n        }\r\n        catch (ex) {\r\n            if (ex.response)\r\n                toast.error(ex.response.data);\r\n        }\r\n    };\r\n    validateNewCredencials(user, schema) {\r\n        const { error } = Joi.validate(user, schema);\r\n        return error ? error.details[0].message : null;\r\n    };\r\n\r\n\r\n    renderSettingsNavigationButtons() {\r\n        const settings = client_paths.settings;\r\n\r\n        return <div className=\"settings__switch-buttons\">\r\n            <LinkWithButton label=\"Wyświetl zdarzenia\" path={client_paths.tasks.main} css={\"btn btn-sm btn-primary\"} />\r\n            <LinkWithButton label=\"Użytkownicy\" path={settings.users} />\r\n            <LinkWithButton label=\"Lokalizacje\" path={settings.localisations} />\r\n        </div>\r\n    };\r\n    renderReturnButton() {\r\n        return <button className=\"btn btn-sm btn-primary\" onClick={this.props.history.goBack}>Powróć do wybranej lokalizacji</button>\r\n    }\r\n    render() {\r\n        const user = userService.getUserFromJWT();\r\n        const { name: userName, shortIdentifier } = user;\r\n        const isSupervisor = userService.isCurrentUserGreaterThanORequalTo(\"Koordynator\");\r\n\r\n        return (\r\n            <div className=\"app__content\">\r\n\r\n                <div className=\"app__container-buttons\">\r\n                    <div className=\"settings__switch-buttons\">\r\n                        {!isSupervisor && this.renderReturnButton()}\r\n                        {isSupervisor && this.renderSettingsNavigationButtons()}\r\n                        <div></div>\r\n                    </div>\r\n                    <LogoutButtonBox />\r\n                </div>\r\n\r\n                <div className=\"settings__user-page\">\r\n                    <div className=\"settings__user-page_user_box\">\r\n                        <h2>Profil użytkownika</h2>\r\n\r\n                        <div className=\"settings__user-page_user_box__info-box_group\">\r\n                            <p>Login:</p>\r\n                            <div style={{ textTransform: \"capitalize\" }} >{userName}</div>\r\n                        </div>\r\n\r\n                        <div className=\"settings__user-page_user_box__info-box_group\">\r\n                            <p>Hasło :</p>\r\n                            <div><ConfirmAlertSettings form={this.form_resetPassword} /></div>\r\n                        </div>\r\n\r\n                        <hr className=\"border border-white\" />\r\n\r\n                        {\r\n                            !user.isCommonUser &&\r\n                            <div>\r\n\r\n                                <div className=\"settings__user-page_user_box__info-box_group\">\r\n                                    <p>Kod Id :</p>\r\n                                    <div >{shortIdentifier.idCode}</div>\r\n                                </div>\r\n\r\n                                <div className=\"settings__user-page_user_box__info-box_group\">\r\n                                    <p>PIN :</p>\r\n                                    <div >{shortIdentifier.pin}</div>\r\n                                    <div><ConfirmAlertSettings form={this.form_resetPIN} /></div>\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserPage;","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport userService from '../../services/userService';\r\n\r\nconst ProtectedRoute = ({ path, requireUserLevel, redirectPath, component: Component, render, ...rest }) => {\r\n    const user = userService.getUserFromJWT();\r\n    if (!user) {\r\n        return <Redirect to={redirectPath} />\r\n    }\r\n\r\n    const accessDenied = userService.isCurrentUserLessThan(requireUserLevel);\r\n\r\n    return (\r\n        <Route path={path} {...rest}\r\n            render={props => {\r\n                if (accessDenied) return <Redirect to={redirectPath} />\r\n                return Component ? <Component {...props} /> : render(props);\r\n            }}\r\n        />\r\n    )\r\n};\r\n\r\nexport default ProtectedRoute;","import React from 'react';\r\nimport { Switch, Redirect } from 'react-router-dom';\r\nimport SettingsHeaderBar from './settingsHeaderBar';\r\nimport Users from './users';\r\nimport Localisations from './localisations';\r\nimport UserPage from './userPage';\r\nimport ProtectedRoute from '../util compnents/protectedRoute';\r\nimport client_paths from '../../constants/client_URL_paths';\r\n\r\nconst SettingsSwitch = () => {\r\n    const path_settings = client_paths.settings;\r\n\r\n    const submenuOptions = [\r\n        { label: \"Wykaz użytkowników\", path: path_settings.users },\r\n        { label: \"Wykaz lokalizacji\", path: path_settings.localisations },\r\n        { label: \"Mój profil\", path: path_settings.user }\r\n    ]\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <SettingsHeaderBar validLocations={submenuOptions} />\r\n            <Switch>\r\n                <ProtectedRoute\r\n                    path={path_settings.localisations}\r\n                    requireUserLevel={\"Koordynator\"}\r\n                    component={Localisations}\r\n                    redirectPath={client_paths.noPermissions}\r\n                />\r\n                <ProtectedRoute\r\n                    path={path_settings.users}\r\n                    requireUserLevel={\"Koordynator\"}\r\n                    component={Users}\r\n                    redirectPath={client_paths.noPermissions}\r\n                />\r\n                <ProtectedRoute\r\n                    path={path_settings.user}\r\n                    requireUserLevel={\"Operator\"}\r\n                    component={UserPage}\r\n                    redirectPath={client_paths.loginPage}\r\n                />\r\n                <Redirect from={path_settings.main} to={path_settings.users} />\r\n            </Switch>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default SettingsSwitch;","import React from 'react';\r\nimport logoEduLEAN from '../../css/images/logo_eduLEAN.png';\r\nimport logoEkopak from '../../css/images/logo_ekopak.png'\r\n\r\nconst Advertisement = () => {\r\n\r\n    const show_advertisements = false;\r\n    // const show_advertisements = JSON.parse(process.env.REACT_APP_SHOW_ADVERTISEMENTS);\r\n\r\n    if (!show_advertisements) {\r\n        return (\r\n            <div className=\"Advertisement\">\r\n                <div className=\"Advertisement__logo-box\">\r\n                    <img src={logoEduLEAN} alt=\"logoEduLEAN\"></img>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"Advertisement\">\r\n            <div className=\"Advertisement__logo-box\">\r\n                <img src={logoEduLEAN} alt=\"logoEduLEAN\"></img>\r\n                <img src={logoEkopak} alt=\"logoEkopak\"></img>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Advertisement;","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport LinkWithButton from '../common/linkWithButton';\r\nimport LogoutButtonBox from '../util compnents/logoutButtonBox';\r\nimport Advertisement from '../util compnents/advertisement';\r\nimport userService from '../../services/userService';\r\nimport client_path from '../../constants/client_URL_paths';\r\n\r\nconst Home = () => {\r\n\r\n    const user = userService.getUserFromJWT();\r\n\r\n    if (!user) return <Redirect to={client_path.loginPage} />\r\n\r\n    const isSupervisor = userService.isCurrentUserGreaterThanORequalTo(\"Koordynator\");\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <header className=\"app__header\">\r\n                <div className=\"app__header-title\">FILMAG</div>\r\n            </header>\r\n            <div className=\"app__content\">\r\n                <div className=\"app__container-buttons\">\r\n                    <div className=\"settings__switch-buttons\">\r\n                        <LinkWithButton\r\n                            label=\"Wyświetl zdarzenia\"\r\n                            path={client_path.tasks.main}\r\n                            css={\"btn btn-sm btn-primary\"}\r\n                        />\r\n                        {isSupervisor &&\r\n                            <LinkWithButton\r\n                                label=\"Przejdź do ustawień\"\r\n                                path={client_path.settings.users}\r\n                            />\r\n                        }\r\n                    </div>\r\n                    <LogoutButtonBox />\r\n                </div>\r\n                <Advertisement />\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport LinkWithButton from '../common/linkWithButton';\r\nimport userService from '../../services/userService';\r\nimport localisationService from '../../services/localisationService';\r\nimport client_paths from '../../constants/client_URL_paths';\r\n\r\nclass SelectLocalisation extends Component {\r\n\r\n    state = { validLocalisations: [] };\r\n\r\n    componentDidMount() {\r\n        const user = userService.getUserFromJWT();\r\n        const validLocalisations = localisationService.getCurrentUserLocalisations();\r\n\r\n        if (user.isCommonUser) {\r\n            this.props.history.push(client_paths.tasks.main);\r\n            return;\r\n        }\r\n        this.setState({ validLocalisations });\r\n    }\r\n\r\n    renderSelectLocalisationButtons() {\r\n        const { validLocalisations } = this.state;\r\n        const style = \"btn btn-secondary btn-sm select-localisation__valid-localiation\";\r\n        return (\r\n            validLocalisations.map(vl =>\r\n                <LinkWithButton key={vl.name} label={vl.name} path={vl.path} css={style} />\r\n            )\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <header className=\"app__header\">\r\n                    <div className=\"app__header-title\">FILMAG</div>\r\n                </header>\r\n                <div className=\"app__content\">\r\n                    <div className=\"select-localisation\">\r\n                        <h1>Wybierz lokalizację</h1>\r\n                        <div className=\"select-localisation__wrapper\">\r\n                            {this.renderSelectLocalisationButtons()}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectLocalisation;","import React, { Component } from 'react';\r\nimport Joi from 'joi-browser';\r\nimport { toast } from 'react-toastify';\r\nimport Advertisement from '../util compnents/advertisement';\r\nimport Loader from '../common/loader';\r\nimport userService from '../../services/userService';\r\nimport localisationService from '../../services/localisationService';\r\nimport authService from '../../services/authService';\r\nimport utilsService from '../../services/utils';\r\nimport httpService from '../../services/httpService';\r\nimport client_paths from '../../constants/client_URL_paths';\r\n\r\nclass LoginPage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            user: {\r\n                name: \"\",\r\n                password: \"\"\r\n            },\r\n            isWaitingForSerwerResponse: false,\r\n        }\r\n    }\r\n\r\n    schema = {\r\n        name: Joi.string().min(1).required().error(() => { return { message: \"Za krótki login.\" }; }),\r\n        password: Joi.string().min(5).required().error(() => { return { message: \"Za krótkie hasło.\" }; })\r\n    };\r\n    errorMessage = \"Obecnie Twoje konto nie posiada dostępu do żadych lokalizacji. Zgłoś problem przełożonemu lub adminowi.\"\r\n\r\n    handleInputOnChange = ({ currentTarget: input }) => {\r\n        const user = { ...this.state.user };\r\n        user[input.name] = input.value;\r\n        this.setState({ user })\r\n    };\r\n\r\n    handleLogin = async () => {\r\n        const { name, password } = this.state.user;\r\n        const error = this.validateUser({ name, password });\r\n        if (error) { toast.error(error); return null; }\r\n\r\n        this.runLoader(true);\r\n        try {\r\n            const jwt = await authService.login(name, password);\r\n\r\n            authService.setJwt(jwt);\r\n            httpService.setHeader_xAuthToken(jwt)\r\n\r\n            const user = userService.getUserFromJWT();\r\n            const userLocalisations = await localisationService.getUserLocalisationsFromDB(user)\r\n\r\n            localisationService.setUserLocalisations(userLocalisations)\r\n\r\n            this.redirectUserToNextPath()\r\n        }\r\n        catch (ex) {\r\n            if (ex.response && (ex.response.status === 400 || ex.response.status === 403)) {\r\n                toast.error(ex.response.data)\r\n            }\r\n\r\n            this.runLoader(false);\r\n        }\r\n\r\n    };\r\n\r\n    runLoader(mode) {\r\n        let { isWaitingForSerwerResponse } = this.state;\r\n        isWaitingForSerwerResponse = mode;\r\n        this.setState({ isWaitingForSerwerResponse })\r\n    }\r\n\r\n    redirectUserToNextPath = async () => {\r\n        const userLocalisations = localisationService.getCurrentUserLocalisations();\r\n        const isSupervisor = userService.isCurrentUserGreaterThanORequalTo(\"Koordynator\");\r\n        const isCommonUser = userService.getUserFromJWT().isCommonUser;\r\n\r\n        if (isSupervisor || isCommonUser) {\r\n            this.props.history.push(client_paths.tasks.main);\r\n        }\r\n        else if (userLocalisations.length > 1) {\r\n            this.props.history.push(client_paths.selectLocalisation);\r\n        }\r\n        else if (userLocalisations.length === 1) {\r\n            this.props.history.push(userLocalisations[0].path);\r\n        }\r\n        else {\r\n            toast.error(this.errorMessage);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    validateUser(user) {\r\n        const { error } = Joi.validate(user, this.schema);\r\n        return error ? error.details[0].message : null;\r\n    };\r\n\r\n    renderLoginBox() {\r\n        return (\r\n            <div className=\"login-page_login_box\">\r\n                <h1>Zaloguj się</h1>\r\n                <div className=\"login-page_login_box__input-box\">\r\n                    <div className=\"login-page_login_box__input-box_group\">\r\n                        <p>Login</p>\r\n                        <input name=\"name\"\r\n                            autoComplete=\"off\"\r\n                            autoFocus\r\n                            onChange={this.handleInputOnChange}\r\n                            onKeyPress={(target) => utilsService.runFunctionAfterPressEnter(target, this.handleLogin)}\r\n                        ></input>\r\n                    </div>\r\n                </div>\r\n                <div className=\"login-page_login_box__input-box\">\r\n                    <div className=\"login-page_login_box__input-box_group\">\r\n                        <p>Hasło</p>\r\n                        <input name=\"password\"\r\n                            autoComplete=\"off\"\r\n                            type=\"password\"\r\n                            onChange={this.handleInputOnChange}\r\n                            onKeyPress={(target) => utilsService.runFunctionAfterPressEnter(target, this.handleLogin)}\r\n                        ></input>\r\n                    </div>\r\n                </div>\r\n                <div className=\"login-page_login_box__button-group\">\r\n                    <button onClick={this.handleLogin}\r\n                    >Zaloguj się</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <header className=\"app__header\">\r\n                    <div className=\"app__header-title\">FILMAG</div>\r\n                </header>\r\n                <div className=\"app__content\">\r\n                    <Advertisement />\r\n                    <div className=\"login-page\">\r\n                        {this.state.isWaitingForSerwerResponse && <Loader />}\r\n                        {!this.state.isWaitingForSerwerResponse && this.renderLoginBox()}\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginPage;\r\n\r\n","import React from 'react';\r\nimport UserInfoLogin from './logoutButtonBox';\r\nimport LinkWithButton from '../common/linkWithButton';\r\nimport client_paths from '../../constants/client_URL_paths';\r\n\r\nconst NoPermissions = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <header className=\"app__header\"></header>\r\n            <div className=\"app__content\">\r\n                <div className=\"app__container-buttons\">\r\n                    <div></div>\r\n                    <UserInfoLogin />\r\n                </div>\r\n                <div className=\"no-permissions-box\">\r\n                    <h2>ODMOWA DOSTĘPU</h2>\r\n                    <p>Nie posiadasz uprawnień do przeglądania zawartości tej strony.</p>\r\n                    <LinkWithButton label=\"Przejdź do wyboru lokalizacji\" path={client_paths.selectLocalisation} />\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default NoPermissions;","import userService from './userService';\r\n\r\nconst timeLimit = 7200000;\r\n\r\n// window event handlers\r\nfunction setActivityDetection() {\r\n    window.addEventListener(\"load\", checkUserActivity)\r\n    window.addEventListener(\"focus\", checkUserActivity)\r\n    window.addEventListener(\"visibilitychange\", onReturn)\r\n    window.addEventListener(\"unload\", setLastActivity)\r\n}\r\nfunction removeActivityDetection() {\r\n    window.removeEventListener(\"load\", checkUserActivity)\r\n    window.removeEventListener(\"focus\", checkUserActivity)\r\n    window.removeEventListener(\"visibilitychange\", onReturn)\r\n    window.removeEventListener(\"unload\", setLastActivity)\r\n}\r\nfunction onReturn() {\r\n    if (document.visibilityState === \"visible\")\r\n        checkUserActivity()\r\n}\r\nfunction setLastActivity() {\r\n    localStorage.setItem(\"lastActivityTime\", new Date().getTime())\r\n}\r\nfunction getLastActivity() {\r\n    return localStorage.getItem(\"lastActivityTime\", new Date().getTime())\r\n}\r\nfunction checkUserActivity() {\r\n    const lastActivityTime = getLastActivity();\r\n    const user = userService.getUserFromJWT();\r\n\r\n    if (lastActivityTime && user) {\r\n        const now = new Date().getTime();\r\n        const timeExceeded = now - lastActivityTime > timeLimit;\r\n\r\n        if (timeExceeded) {\r\n            localStorage.clear()\r\n            window.location = '/'\r\n            return\r\n        }\r\n    }\r\n\r\n    setLastActivity()\r\n}\r\nexport default {\r\n    setActivityDetection,\r\n    removeActivityDetection\r\n}","import React, { Component } from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport jwtDecode from 'jwt-decode';\r\nimport ShowTasks from './components/show tasks/showTasks';\r\nimport SettingsSwitch from './components/settings/settingsSwitch';\r\nimport Home from './components/home page/home';\r\nimport SelectLocalisation from './components/util compnents/selectLocalisation';\r\nimport ProtectedRoute from './components/util compnents/protectedRoute';\r\nimport LoginPage from './components/login page/loginPage';\r\nimport NoPermissions from './components/util compnents/noPermssions';\r\nimport checkUserActivity from './services/checkUserActivityService';\r\nimport auth from './services/authService';\r\nimport client_path from './constants/client_URL_paths';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nclass App extends Component {\r\n  state = {};\r\n  componentDidMount() {\r\n    checkUserActivity.setActivityDetection();\r\n    try {\r\n      const jwt = auth.getJwt;\r\n      const user = jwtDecode(jwt);\r\n      this.setState({ user });\r\n    }\r\n    catch (ex) { } // ignoruj brak tokenu\r\n  }\r\n  componentWillUnmount() {\r\n    checkUserActivity.removeActivityDetection();\r\n  };\r\n  render() {\r\n    document.title = \"FILMAG\";\r\n    return (\r\n      <div className=\"App\">\r\n        <ToastContainer />\r\n        <Switch>\r\n          <ProtectedRoute\r\n            path={client_path.tasks.paramId}\r\n            requireUserLevel={\"Operator\"}\r\n            redirectPath={client_path.loginPage}\r\n            component={ShowTasks}\r\n          />\r\n          <ProtectedRoute\r\n            path={client_path.tasks.main}\r\n            requireUserLevel={\"Operator\"}\r\n            redirectPath={client_path.loginPage}\r\n            component={ShowTasks}\r\n          />\r\n          <ProtectedRoute\r\n            path={client_path.selectLocalisation}\r\n            requireUserLevel={\"Operator\"}\r\n            redirectPath={client_path.loginPage}\r\n            component={SelectLocalisation}\r\n          />\r\n          <ProtectedRoute\r\n            path={client_path.settings.main}\r\n            requireUserLevel={\"Operator\"}\r\n            redirectPath={client_path.noPermissions}\r\n            component={SettingsSwitch}\r\n          />\r\n          <ProtectedRoute\r\n            path={client_path.noPermissions}\r\n            requireUserLevel={\"Operator\"}\r\n            redirectPath={client_path.loginPage} component={NoPermissions}\r\n          />\r\n          <Route\r\n            path={client_path.loginPage}\r\n            component={LoginPage}\r\n          />\r\n          {this.state.user && <Redirect to={client_path.tasks.main} />}\r\n          <Route\r\n            path={client_path.home}\r\n            component={Home}\r\n          />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { UPDATE_TASKS, CHANGE_CURRENT_SORTING_STATUS, TOGGLE_CHOOSE_MANY_TASKS_MODE, UPDATE_CHOOSED_TASKS_FROM_MANAGER_MODE } from '../constants/actionTypes';\r\n\r\nconst reducerTasks = (state = {}, action) => {\r\n\r\n  switch (action.type) {\r\n\r\n    case UPDATE_TASKS: {\r\n      return ({ ...state, tasks: action.tasks });\r\n    }\r\n    case CHANGE_CURRENT_SORTING_STATUS: {\r\n      return ({ ...state, currentSortingStatus: action.currentSortingStatus });\r\n    }\r\n    case TOGGLE_CHOOSE_MANY_TASKS_MODE: {\r\n      return ({ ...state, chooseManyTasksMode: action.chooseManyTasksMode });\r\n    }\r\n    case UPDATE_CHOOSED_TASKS_FROM_MANAGER_MODE: {\r\n      return ({ ...state, selectedTasksIDs_fromManagerMode: action.selectedTasksIDs_fromManagerMode });\r\n    }\r\n    // no default\r\n\r\n  }\r\n\r\n  return state;\r\n\r\n};\r\n\r\nexport default reducerTasks;","import { CHANGE_CURRENT_LOCALISATION } from '../constants/actionTypes';\r\n\r\nconst reducerLocalisations = (state = {}, action) => {\r\n  switch (action.type) {\r\n\r\n    case CHANGE_CURRENT_LOCALISATION: {\r\n      return ({ ...state, currentLocalisation: action.currentLocalisation });\r\n    }\r\n    // no default\r\n\r\n  }\r\n\r\n  return state;\r\n\r\n};\r\n\r\nexport default reducerLocalisations;","import { TOGGLE_SERVICE_MODE, CHANGE_SERVICE_MODE_JOB_NAME, TOGGLE_DELETE_TASK_MODE } from '../constants/actionTypes';\r\n\r\nconst reducerServiceMode = (state = {}, action) => {\r\n  switch (action.type) {\r\n\r\n    case TOGGLE_SERVICE_MODE: {\r\n      return ({ ...state, serviceMode: action.serviceMode });\r\n    }\r\n    case CHANGE_SERVICE_MODE_JOB_NAME: {\r\n      return ({ ...state, serviceMode_jobName: action.serviceMode_jobName });\r\n    }\r\n    case TOGGLE_DELETE_TASK_MODE: {\r\n      return ({ ...state, managerMode: action.managerMode });\r\n    }\r\n    // no default\r\n\r\n  }\r\n\r\n  return state;\r\n\r\n};\r\n\r\nexport default reducerServiceMode;","import { combineReducers } from 'redux';\r\nimport reducerTasks from './reducerTasks';\r\nimport reducerLocalisations from './reducerLocalisations';\r\nimport reducerServiceMode from './reducerServiceMode';\r\n\r\nconst rootReducer = combineReducers({\r\n  reducerTasks,\r\n  reducerLocalisations,\r\n  reducerServiceMode\r\n});\r\n\r\nexport default rootReducer;","import { createStore } from 'redux';\r\nimport rootReducer from './reducers/root';\r\n\r\nconst initialState = {\r\n  reducerTasks: {\r\n    tasks: null,\r\n    currentSortingStatus: false,\r\n    chooseManyTasksMode: false,\r\n    selectedTasksIDs_fromManagerMode: []\r\n  },\r\n  reducerLocalisations: {\r\n    currentLocalisation: {\r\n      name: \"\",\r\n      category: \"Magazyn\"\r\n    }\r\n  },\r\n  reducerServiceMode: {\r\n    serviceMode: false,\r\n    serviceMode_jobName: \"Admin\",\r\n    managerMode: false\r\n  }\r\n};\r\n\r\nexport const store = createStore(rootReducer, initialState);\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n// eslint-disable-next-line no-unused-vars\r\nimport babelPolyfill from 'babel-polyfill';\r\nimport './main.css';\r\nimport 'font-awesome/css/font-awesome.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/store';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter basename=\"/\">\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </BrowserRouter>\r\n    , document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}